Single-dimensional arrays in Java support a variety of operations that allow you to manipulate and work with the data stored within them efficiently. Here's a comprehensive overview of the common operations you can perform with single-dimensional arrays:

1. Declaration and Initialization
Declaration and Initialization Together:

int[] numbers = {1, 2, 3, 4, 5};
Declaration and Initialization Separately:

int[] numbers;
numbers = new int[]{1, 2, 3, 4, 5};

2. Accessing Elements
You can access elements in an array using their index, which starts at 0 and goes up to array.length - 1.


int[] numbers = {1, 2, 3, 4, 5};
int firstElement = numbers[0]; // Accessing the first element (index 0)
int thirdElement = numbers[2]; // Accessing the third element (index 2)

3. Modifying Elements
Elements in an array can be modified by assigning a new value to the element at a specific index.


int[] numbers = {1, 2, 3, 4, 5};
numbers[1] = 10; // Modifying the second element (index 1)
numbers[3] = 8;  // Modifying the fourth element (index 3)

4. Iterating Through Arrays
Arrays can be iterated using loops to access and process each element sequentially.

Using for Loop:

int[] numbers = {1, 2, 3, 4, 5};
for (int i = 0; i < numbers.length; i++) {
    System.out.println(numbers[i]);
}
Using Enhanced for Loop (foreach):

int[] numbers = {1, 2, 3, 4, 5};
for (int number : numbers) {
    System.out.println(number);
}

5. Array Length
The length of an array (number of elements it can hold) can be obtained using the length property.


int[] numbers = {1, 2, 3, 4, 5};
int arrayLength = numbers.length; // Length of the array (5 in this case)

6. Searching in Arrays
You can search for an element in an array by iterating through it and checking each element.

int[] numbers = {1, 2, 3, 4, 5};
int searchElement = 3;
boolean found = false;
for (int number : numbers) {
    if (number == searchElement) {
        found = true;
        break;
    }
}
if (found) {
    System.out.println("Element found in the array.");
} else {
    System.out.println("Element not found in the array.");
}

7. Sorting Arrays
Arrays can be sorted using various algorithms. Java provides a built-in method Arrays.sort() for sorting arrays.

int[] numbers = {5, 2, 8, 1, 3};
Arrays.sort(numbers); // Sorts the array in ascending order
System.out.println(Arrays.toString(numbers)); // Prints sorted array

8. Concatenating Arrays
You can concatenate two arrays by creating a new array and copying elements from both arrays into it.

int[] numbers1 = {1, 2, 3};
int[] numbers2 = {4, 5, 6};
int[] combined = new int[numbers1.length + numbers2.length];
System.arraycopy(numbers1, 0, combined, 0, numbers1.length);
System.arraycopy(numbers2, 0, combined, numbers1.length, numbers2.length);
System.out.println(Arrays.toString(combined)); // [1, 2, 3, 4, 5, 6]

9. Resizing Arrays
Arrays in Java have a fixed size once created. To "resize" an array, you typically create a new array with the desired size and copy elements from the old array to the new one.

int[] oldArray = {1, 2, 3};
int newSize = 5;
int[] newArray = new int[newSize];
System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);
System.out.println(Arrays.toString(newArray)); // [1, 2, 3, 0, 0] (remaining elements default to 0)

10. Other Operations
Arrays support many other operations, including:

Copying Arrays: Using System.arraycopy() or Arrays.copyOf().
Comparing Arrays: Using Arrays.equals() to check if two arrays have the same elements in the same order.
Filling Arrays: Using Arrays.fill() to assign the same value to every element in the array.
Summary
Single-dimensional arrays in Java are powerful data structures that allow you to store and manipulate collections of elements efficiently. Understanding how to declare, initialize, access, modify, iterate through, search, sort, concatenate, and resize arrays is essential for effective programming in Java, especially when dealing with collections of homogeneous data.





