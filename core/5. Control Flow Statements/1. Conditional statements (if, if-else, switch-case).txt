Conditional statements in Java allow the execution of certain parts of code based on the evaluation of boolean expressions. The main conditional statements in Java are if, if-else, and switch-case. Here are detailed explanations and examples of each:

1. if Statement
The if statement evaluates a boolean expression and executes the block of code inside the if statement if the expression is true.

Syntax:

if (condition) {
    // code to be executed if condition is true
}
Example:

public class IfStatementExample {
    public static void main(String[] args) {
        int number = 10;
        if (number > 0) {
            System.out.println("The number is positive.");
        }
    }
}
2. if-else Statement
The if-else statement evaluates a boolean expression and executes one block of code if the expression is true and another block if it is false.

Syntax:

if (condition) {
    // code to be executed if condition is true
} else {
    // code to be executed if condition is false
}
Example:

java
Copy code
public class IfElseStatementExample {
    public static void main(String[] args) {
        int number = -10;
        if (number > 0) {
            System.out.println("The number is positive.");
        } else {
            System.out.println("The number is not positive.");
        }
    }
}
3. if-else if-else Ladder
The if-else if-else ladder allows checking multiple conditions. If one condition is true, the corresponding block of code is executed, and the rest of the conditions are not checked.

Syntax:

if (condition1) {
    // code to be executed if condition1 is true
} else if (condition2) {
    // code to be executed if condition2 is true
} else {
    // code to be executed if all conditions are false
}
Example:

public class IfElseIfElseLadderExample {
    public static void main(String[] args) {
        int number = 0;
        if (number > 0) {
            System.out.println("The number is positive.");
        } else if (number < 0) {
            System.out.println("The number is negative.");
        } else {
            System.out.println("The number is zero.");
        }
    }
}
4. switch-case Statement
The switch-case statement allows selecting one of many code blocks to be executed. It evaluates an expression, matches the expression's value to a case, and executes the corresponding block of code.

Syntax:

switch (expression) {
    case value1:
        // code to be executed if expression equals value1
        break;
    case value2:
        // code to be executed if expression equals value2
        break;
    // you can have any number of case statements
    default:
        // code to be executed if none of the cases match
}
Example:

public class SwitchCaseExample {
    public static void main(String[] args) {
        int day = 3;
        String dayName;
        switch (day) {
            case 1:
                dayName = "Sunday";
                break;
            case 2:
                dayName = "Monday";
                break;
            case 3:
                dayName = "Tuesday";
                break;
            case 4:
                dayName = "Wednesday";
                break;
            case 5:
                dayName = "Thursday";
                break;
            case 6:
                dayName = "Friday";
                break;
            case 7:
                dayName = "Saturday";
                break;
            default:
                dayName = "Invalid day";
                break;
        }
        System.out.println("Day: " + dayName);
    }
}
Summary
if Statement: Executes code if a condition is true.
if-else Statement: Executes one block of code if a condition is true and another if it is false.
if-else if-else Ladder: Allows checking multiple conditions sequentially.
switch-case Statement: Allows selecting and executing one of many code blocks based on the value of an expression.
These conditional statements are fundamental for controlling the flow of a Java program based on different conditions.





