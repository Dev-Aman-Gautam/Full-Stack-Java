Bitwise operators in Java perform operations on individual bits of integer types (byte, short, int, and long). These operators treat their operands as a sequence of 32 or 64 bits rather than as decimal, hexadecimal, or octal numbers. Here are the bitwise operators available in Java, along with examples for each:

1. Bitwise AND (&)
The bitwise AND operator performs a logical AND operation on each bit of its operands. The result is 1 only if both corresponding bits are 1.

Example:

public class BitwiseOperators {
    public static void main(String[] args) {
        int a = 5;  // 0101 in binary
        int b = 3;  // 0011 in binary
        int result = a & b; // 0001 in binary (1 in decimal)
        System.out.println("a & b: " + result); // Output: a & b: 1
    }
}
2. Bitwise OR (|)
The bitwise OR operator performs a logical OR operation on each bit of its operands. The result is 1 if at least one of the corresponding bits is 1.

Example:

public class BitwiseOperators {
    public static void main(String[] args) {
        int a = 5;  // 0101 in binary
        int b = 3;  // 0011 in binary
        int result = a | b; // 0111 in binary (7 in decimal)
        System.out.println("a | b: " + result); // Output: a | b: 7
    }
}
3. Bitwise XOR (^)
The bitwise XOR (exclusive OR) operator performs a logical XOR operation on each bit of its operands. The result is 1 if the corresponding bits are different.

Example:

public class BitwiseOperators {
    public static void main(String[] args) {
        int a = 5;  // 0101 in binary
        int b = 3;  // 0011 in binary
        int result = a ^ b; // 0110 in binary (6 in decimal)
        System.out.println("a ^ b: " + result); // Output: a ^ b: 6
    }
}
4. Bitwise Complement (~)
The bitwise complement operator inverts each bit of its operand. It changes 1 to 0 and 0 to 1.

Example:

public class BitwiseOperators {
    public static void main(String[] args) {
        int a = 5;  // 0101 in binary
        int result = ~a; // 1010 in binary (in 32-bit, it's 11111111111111111111111111111010, -6 in decimal)
        System.out.println("~a: " + result); // Output: ~a: -6
    }
}
5. Left Shift (<<)
The left shift operator shifts the bits of its operand to the left by the number of positions specified. Each shift left doubles the number.

Example:

public class BitwiseOperators {
    public static void main(String[] args) {
        int a = 5;  // 0101 in binary
        int result = a << 1; // 1010 in binary (10 in decimal)
        System.out.println("a << 1: " + result); // Output: a << 1: 10
    }
}
6. Right Shift (>>)
The right shift operator shifts the bits of its operand to the right by the number of positions specified. Each shift right halves the number.

Example:

public class BitwiseOperators {
    public static void main(String[] args) {
        int a = 5;  // 0101 in binary
        int result = a >> 1; // 0010 in binary (2 in decimal)
        System.out.println("a >> 1: " + result); // Output: a >> 1: 2
    }
}
7. Unsigned Right Shift (>>>)
The unsigned right shift operator shifts the bits of its operand to the right by the number of positions specified. It inserts zeros in the leftmost positions.

Example:

public class BitwiseOperators {
    public static void main(String[] args) {
        int a = -5; // 11111111111111111111111111111011 in binary (two's complement representation)
        int result = a >>> 1; // 01111111111111111111111111111101 in binary (2147483645 in decimal)
        System.out.println("a >>> 1: " + result); // Output: a >>> 1: 2147483645
    }
}
Summary
Here is a summary of bitwise operators in Java:

Bitwise AND (&): Performs a logical AND on each pair of bits.
Bitwise OR (|): Performs a logical OR on each pair of bits.
Bitwise XOR (^): Performs a logical XOR on each pair of bits.
Bitwise Complement (~): Inverts each bit.
Left Shift (<<): Shifts bits to the left, filling with zeros.
Right Shift (>>): Shifts bits to the right, preserving the sign bit (sign-extended).
Unsigned Right Shift (>>>): Shifts bits to the right, filling with zeros.
These operators are used for various low-level operations, such as bit manipulation, performance optimizations, and working with data at the binary level.





