Assignment operators in Java are used to assign values to variables. In addition to the basic assignment operator (=), Java provides several compound assignment operators that combine an arithmetic operation with assignment. Here is a detailed overview of the assignment operators available in Java, along with examples for each:

1. Basic Assignment (=)
The basic assignment operator assigns the value on its right to the variable on its left.

Example:

public class AssignmentOperators {
    public static void main(String[] args) {
        int a = 10; // Assigns 10 to variable a
        System.out.println("a: " + a); // Output: a: 10
    }
}
2. Addition Assignment (+=)
The addition assignment operator adds the value on the right to the variable on the left and then assigns the result to the variable on the left.

Example:

public class AssignmentOperators {
    public static void main(String[] args) {
        int a = 10;
        a += 5; // Equivalent to a = a + 5
        System.out.println("a: " + a); // Output: a: 15
    }
}
3. Subtraction Assignment (-=)
The subtraction assignment operator subtracts the value on the right from the variable on the left and then assigns the result to the variable on the left.

Example:

public class AssignmentOperators {
    public static void main(String[] args) {
        int a = 10;
        a -= 5; // Equivalent to a = a - 5
        System.out.println("a: " + a); // Output: a: 5
    }
}
4. Multiplication Assignment (*=)
The multiplication assignment operator multiplies the variable on the left by the value on the right and then assigns the result to the variable on the left.

Example:

public class AssignmentOperators {
    public static void main(String[] args) {
        int a = 10;
        a *= 5; // Equivalent to a = a * 5
        System.out.println("a: " + a); // Output: a: 50
    }
}
5. Division Assignment (/=)
The division assignment operator divides the variable on the left by the value on the right and then assigns the result to the variable on the left.

Example:

public class AssignmentOperators {
    public static void main(String[] args) {
        int a = 10;
        a /= 5; // Equivalent to a = a / 5
        System.out.println("a: " + a); // Output: a: 2
    }
}
6. Modulus Assignment (%=)
The modulus assignment operator takes the modulus of the variable on the left by the value on the right and then assigns the result to the variable on the left.

Example:

public class AssignmentOperators {
    public static void main(String[] args) {
        int a = 10;
        a %= 3; // Equivalent to a = a % 3
        System.out.println("a: " + a); // Output: a: 1
    }
}
7. Bitwise AND Assignment (&=)
The bitwise AND assignment operator performs a bitwise AND on the variable on the left with the value on the right and then assigns the result to the variable on the left.

Example:

public class AssignmentOperators {
    public static void main(String[] args) {
        int a = 10; // 1010 in binary
        a &= 3; // 0011 in binary, equivalent to a = a & 3
        System.out.println("a: " + a); // Output: a: 2 (0010 in binary)
    }
}
8. Bitwise OR Assignment (|=)
The bitwise OR assignment operator performs a bitwise OR on the variable on the left with the value on the right and then assigns the result to the variable on the left.

Example:

public class AssignmentOperators {
    public static void main(String[] args) {
        int a = 10; // 1010 in binary
        a |= 3; // 0011 in binary, equivalent to a = a | 3
        System.out.println("a: " + a); // Output: a: 11 (1011 in binary)
    }
}
9. Bitwise XOR Assignment (^=)
The bitwise XOR assignment operator performs a bitwise XOR on the variable on the left with the value on the right and then assigns the result to the variable on the left.

Example:

public class AssignmentOperators {
    public static void main(String[] args) {
        int a = 10; // 1010 in binary
        a ^= 3; // 0011 in binary, equivalent to a = a ^ 3
        System.out.println("a: " + a); // Output: a: 9 (1001 in binary)
    }
}
10. Left Shift Assignment (<<=)
The left shift assignment operator left shifts the variable on the left by the number of positions specified on the right and then assigns the result to the variable on the left.

Example:

public class AssignmentOperators {
    public static void main(String[] args) {
        int a = 10; // 1010 in binary
        a <<= 2; // Equivalent to a = a << 2
        System.out.println("a: " + a); // Output: a: 40 (101000 in binary)
    }
}
11. Right Shift Assignment (>>=)
The right shift assignment operator right shifts the variable on the left by the number of positions specified on the right and then assigns the result to the variable on the left.

Example:

public class AssignmentOperators {
    public static void main(String[] args) {
        int a = 10; // 1010 in binary
        a >>= 2; // Equivalent to a = a >> 2
        System.out.println("a: " + a); // Output: a: 2 (10 in binary)
    }
}
12. Unsigned Right Shift Assignment (>>>=)
The unsigned right shift assignment operator right shifts the variable on the left by the number of positions specified on the right and fills the leftmost bits with zeros, then assigns the result to the variable on the left.

Example:

public class AssignmentOperators {
    public static void main(String[] args) {
        int a = -10; // 11111111111111111111111111110110 in binary (two's complement representation)
        a >>>= 2; // Equivalent to a = a >>> 2
        System.out.println("a: " + a); // Output: a: 1073741821 (00111111111111111111111111111101 in binary)
    }
}
Summary
Here is a summary of assignment operators in Java:

Basic Assignment (=): Assigns the right operand to the left operand.
Addition Assignment (+=): Adds the right operand to the left operand and assigns the result to the left operand.
Subtraction Assignment (-=): Subtracts the right operand from the left operand and assigns the result to the left operand.
Multiplication Assignment (*=): Multiplies the left operand by the right operand and assigns the result to the left operand.
Division Assignment (/=): Divides the left operand by the right operand and assigns the result to the left operand.
Modulus Assignment (%=): Takes the modulus of the left operand by the right operand and assigns the result to the left operand.
Bitwise AND Assignment (&=): Performs a bitwise AND on the left operand with the right operand and assigns the result to the left operand.
Bitwise OR Assignment (|=): Performs a bitwise OR on the left operand with the right operand and assigns the result to the left operand.
Bitwise XOR Assignment (^=): Performs a bitwise XOR on the left operand with the right operand and assigns the result to the left operand.
Left Shift Assignment (<<=): Left shifts the left operand by the number of positions specified by the right operand and assigns the result to the left operand.
Right Shift Assignment (>>=): Right shifts the left operand by the number of positions specified by the right operand and assigns the result to the left operand.
Unsigned Right Shift Assignment (>>>=): Unsigned right shifts the left operand by the number of positions specified by the right operand and assigns the result to the left operand.
These operators provide a shorthand way to perform arithmetic and bitwise operations, making the code more concise and readable.





