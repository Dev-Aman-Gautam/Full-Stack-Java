In Java, access modifiers are keywords that define the accessibility or visibility of classes, methods, and variables (fields) within a Java program. They control how classes, methods, and variables can be accessed and modified from other classes and packages. Java provides four types of access modifiers:

1. private
2. default (no modifier)
3. protected
4. public
Let's explore each access modifier in Java in detail:

1. private
Visibility: Limited to the same class where it is declared.
Usage: Used to hide implementation details and ensure data encapsulation.
Access: Cannot be accessed or modified from outside the class where it is declared, including subclasses.
Example:

public class Car {
    private String brand; // Private instance variable
    
    // Constructor
    public Car(String brand) {
        this.brand = brand;
    }
    
    // Getter method for brand
    public String getBrand() {
        return brand;
    }
    
    // Setter method for brand
    private void setBrand(String brand) {
        this.brand = brand;
    }
    
    public static void main(String[] args) {
        Car myCar = new Car("Toyota");
        
        // Accessing private field indirectly using getter method
        System.out.println("Brand: " + myCar.getBrand());
        
        // Compiler error: Cannot access private method
        // myCar.setBrand("Honda");
    }
}
2. default (no modifier)
Visibility: Limited to the package where it is declared (package-private).
Usage: Used when no access modifier is specified.
Access: Can be accessed within the same package but not from outside the package.
Example:

package com.example;

class Car {
    String brand; // Default (package-private) instance variable
    
    // Constructor
    Car(String brand) {
        this.brand = brand;
    }
    
    // Method with default access
    void displayInfo() {
        System.out.println("Brand: " + brand);
    }
}

public class Main {
    public static void main(String[] args) {
        Car myCar = new Car("Toyota");
        
        // Accessing default (package-private) field and method from the same package
        System.out.println("Brand: " + myCar.brand);
        myCar.displayInfo();
        
        // Compiler error: Cannot access default (package-private) field and method from different package
        // System.out.println("Brand: " + myCar.brand);
        // myCar.displayInfo();
    }
}
3. protected
Visibility: Limited to the same package and subclasses (even if they are in different packages).
Usage: Used when the member needs to be accessed within the same package and subclasses for inheritance.
Access: Can be accessed within the same package and subclasses, whether they are in the same or different packages.
Example:

package com.example;

class Car {
    protected String brand; // Protected instance variable
    
    // Constructor
    protected Car(String brand) {
        this.brand = brand;
    }
    
    // Method with protected access
    protected void displayInfo() {
        System.out.println("Brand: " + brand);
    }
}

public class Sedan extends Car {
    private int year;
    
    public Sedan(String brand, int year) {
        super(brand); // Call to superclass constructor
        this.year = year;
    }
    
    public void showDetails() {
        // Accessing protected field and method from subclass
        System.out.println("Brand: " + brand); // Accessing protected field
        displayInfo(); // Accessing protected method
    }
    
    public static void main(String[] args) {
        Sedan mySedan = new Sedan("Toyota", 2020);
        mySedan.showDetails();
    }
}
4. public
Visibility: Accessible from anywhere in the Java program.
Usage: Used when the member needs to be accessible to all classes and packages.
Access: Can be accessed from anywhere, including different packages.
Example:

package com.example;

public class Car {
    public String brand; // Public instance variable
    
    // Constructor
    public Car(String brand) {
        this.brand = brand;
    }
    
    // Public method
    public void displayInfo() {
        System.out.println("Brand: " + brand);
    }
}

public class Main {
    public static void main(String[] args) {
        Car myCar = new Car("Toyota");
        
        // Accessing public field and method from different package
        System.out.println("Brand: " + myCar.brand);
        myCar.displayInfo();
    }
}
Summary
private: Restricts access to the same class.
default (no modifier): Limits access to the same package.
protected: Allows access to the same package and subclasses (even if they are in different packages).
public: Provides unrestricted access from anywhere.
Understanding and correctly applying access modifiers is crucial for designing classes with appropriate levels of encapsulation, ensuring proper data hiding, and promoting code reusability and maintainability in Java applications.







