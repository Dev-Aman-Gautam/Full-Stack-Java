Reference data types in Java are used to store references or memory addresses of objects rather than the actual data itself. Unlike primitive data types, which store values directly, reference data types point to objects stored elsewhere in memory. Java's reference data types include:

1. Class Types: Class types represent instances of classes. Objects of class types are created using the 'new' keyword and stored on the heap.

2. Array Types: Array types represent arrays, which are ordered collections of elements of the same type. Arrays are also created using the 'new' keyword and stored on the heap.

3. Interface Types: Interface types represent references to objects of classes that implement the specified interface.

4. Enum Types: Enum types represent a fixed set of constants. Each constant is an object of the enum type.

5. Other Reference Types: This includes references to objects of user-defined classes, built-in classes like 'String', and other classes provided by the Java standard library.

Here's an example demonstrating the use of reference data types in Java:


public class ReferenceDataTypesExample {
    public static void main(String[] args) {
        // Reference data types
        
        // String reference
        String str = "Hello, World!";
        
        // Array reference
        int[] numbers = {1, 2, 3, 4, 5};
        
        // Object reference
        MyClass myObject = new MyClass();
        
        // Printing out references
        System.out.println("String reference: " + str);
        System.out.println("Array reference: " + numbers);
        System.out.println("Object reference: " + myObject);
    }
}

// Example class
class MyClass {
    // Class members and methods
}


In this example:

- 'str' is a reference to a 'String' object containing the text "Hello, World!".
- 'numbers' is a reference to an array of integers.
- 'myObject' is a reference to an instance of the `MyClass` class, created using the 'new' keyword.
- The references stored in these variables are printed to the console.

public class PrimitiveDataTypesExample {
    public static void main(String[] args) {
        // Declaring and initializing variables of different primitive data types
        
        byte myByte = 100;
        short myShort = 1000;
        int myInt = 1000000;
        long myLong = 1000000000L; // Note the 'L' suffix to indicate a long literal
        
        float myFloat = 3.14f; // Note the 'f' suffix to indicate a float literal
        double myDouble = 3.14159;
        
        char myChar = 'A';
        
        boolean myBoolean = true;
        
        // Printing out the values of variables
        
        System.out.println("byte: " + myByte);
        System.out.println("short: " + myShort);
        System.out.println("int: " + myInt);
        System.out.println("long: " + myLong);
        System.out.println("float: " + myFloat);
        System.out.println("double: " + myDouble);
        System.out.println("char: " + myChar);
        System.out.println("boolean: " + myBoolean);
    }
}