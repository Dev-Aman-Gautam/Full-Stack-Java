The lifecycle of a thread in Java describes its various states from creation to termination. Understanding the thread lifecycle is crucial for effective multithreading programming. Here are the different states and transitions in the lifecycle of a thread:

Thread States
New:

A thread is in this state when an instance of the Thread class is created, but start() method is not yet called.

Thread thread = new Thread();
// Thread is in 'New' state now
Runnable:

A thread enters the runnable state when start() method is called.
The thread is ready to run, but the scheduler has not selected it to be the running thread yet.

thread.start();
// Thread is in 'Runnable' state now
Running:

The thread is in running state when the thread scheduler selects it to run.
The run() method of the thread is being executed.

// Thread is in 'Running' state now
Blocked/Waiting:

A thread can enter the blocked or waiting state for various reasons, such as waiting for a monitor lock, waiting for I/O operations to complete, or calling wait() or sleep() methods.

synchronized (object) {
    // Code inside synchronized block
    // Thread can enter 'Blocked' state if waiting for the lock on 'object'
}
Timed Waiting:

Threads can enter a timed waiting state when they call methods like sleep(long millis), wait(long millis), or join(long millis).

try {
    Thread.sleep(1000); // Thread enters 'Timed Waiting' state for 1 second
} catch (InterruptedException e) {
    e.printStackTrace();
}
Terminated (Dead):

A thread enters the terminated state when its run() method completes execution or when stop() method is called (not recommended as it's deprecated).
java
Copy code
// After the run() method completes
// Thread is in 'Terminated' state now
Thread Lifecycle Transitions
Creation:
A new thread is created by instantiating the Thread class or by implementing the Runnable interface.
Runnable:
The thread becomes runnable when start() method is called, and it waits for the scheduler to allocate CPU time.
Running:
The thread moves from runnable to running state when the scheduler selects it for execution.
Blocked/Waiting:
The thread may enter this state due to synchronization or waiting for I/O operations.
Timed Waiting:
Threads enter this state when they wait for a specified amount of time using sleep() or wait() with timeout.
Termination:
Threads terminate naturally when their run() method completes or manually when stop() method is called (though stop() is deprecated and not recommended).
Example of Thread Lifecycle

class MyThread extends Thread {
    public void run() {
        System.out.println("Thread running: " + Thread.currentThread().getName());
        try {
            Thread.sleep(2000); // Simulate some work
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("Thread completed: " + Thread.currentThread().getName());
    }
}

public class ThreadLifecycleExample {
    public static void main(String[] args) {
        MyThread thread = new MyThread();

        // New
        System.out.println("Thread state after creation: " + thread.getState());

        // Runnable
        thread.start();
        System.out.println("Thread state after start(): " + thread.getState());

        try {
            Thread.sleep(500); // Main thread waits to see the state change
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Running
        System.out.println("Thread state while running: " + thread.getState());

        try {
            thread.join(); // Wait for thread to complete
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Terminated
        System.out.println("Thread state after completion: " + thread.getState());
    }
}
Thread State Transitions in the Example
New: The thread is in this state after MyThread object creation.

Runnable: After calling start(), the thread moves to the runnable state.

Running: When the scheduler selects the thread for execution, it moves to the running state.

Terminated: After completing its run() method, the thread moves to the terminated state.

Understanding the thread lifecycle helps in managing threads effectively, ensuring proper synchronization, and handling concurrency issues in Java applications.







