Creating threads in Java can be achieved using either the Thread class or the Runnable interface. Both approaches allow you to define tasks that can run concurrently. Here's an explanation of each method with examples:

1. Extending the Thread Class
You can create a thread by extending the Thread class and overriding its run() method. Here's an example:

// Define a class that extends Thread
class MyThread extends Thread {
    public void run() {
        // Define the task for the thread here
        for (int i = 0; i < 5; i++) {
            System.out.println("Thread running: " + i);
            try {
                Thread.sleep(1000); // Simulate some work
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

public class ThreadExample {
    public static void main(String[] args) {
        // Create an instance of MyThread
        MyThread thread = new MyThread();

        // Start the thread
        thread.start();

        // The main thread continues to run concurrently with the new thread
        for (int i = 0; i < 5; i++) {
            System.out.println("Main thread running: " + i);
            try {
                Thread.sleep(500); // Simulate some work
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
In this example:

MyThread extends Thread and overrides the run() method to define the task of the thread.
thread.start() starts the execution of the thread. The JVM calls the run() method of MyThread concurrently with the main thread.
The main thread continues to execute concurrently with MyThread.
2. Implementing the Runnable Interface
Alternatively, you can create a thread by implementing the Runnable interface and passing an instance of your Runnable implementation to a Thread object. Hereâ€™s an example:

// Define a class that implements Runnable
class MyRunnable implements Runnable {
    public void run() {
        // Define the task for the thread here
        for (int i = 0; i < 5; i++) {
            System.out.println("Runnable running: " + i);
            try {
                Thread.sleep(1000); // Simulate some work
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

public class RunnableExample {
    public static void main(String[] args) {
        // Create an instance of MyRunnable
        MyRunnable myRunnable = new MyRunnable();

        // Create a Thread object with MyRunnable as the target
        Thread thread = new Thread(myRunnable);

        // Start the thread
        thread.start();

        // The main thread continues to run concurrently with the new thread
        for (int i = 0; i < 5; i++) {
            System.out.println("Main thread running: " + i);
            try {
                Thread.sleep(500); // Simulate some work
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
In this example:

MyRunnable implements Runnable and defines the task in its run() method.
A Thread object is created with MyRunnable as the target.
thread.start() starts the execution of the thread running MyRunnable.
Differences Between Extending Thread and Implementing Runnable
Extending Thread: Directly extends the Thread class, which may limit flexibility since Java does not support multiple inheritance. It's suitable when no other class needs to be extended.

Implementing Runnable: Allows the class to extend another class and be used as a Runnable at the same time. This approach is more flexible and encourages better design practices.

Choosing Between Thread and Runnable
Use Thread class when you are making a simple task that does not require flexibility.

Use Runnable interface when you want to extend other classes or add additional behavior to your task.

By using threads in Java, you can execute multiple tasks concurrently, improve performance, and build responsive applications that can handle complex operations efficiently.







