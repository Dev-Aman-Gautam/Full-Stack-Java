In Java, the Map interface is part of the Collections Framework and represents a collection of key-value pairs. Each key maps to exactly one value. The primary implementations of the Map interface are HashMap and TreeMap.

Map Interface
The Map interface provides methods for storing and manipulating key-value pairs. Keys are unique, and each key maps to exactly one value. Commonly used methods include:

put(K key, V value): Associates the specified value with the specified key in the map.
get(Object key): Returns the value to which the specified key is mapped, or null if the map contains no mapping for the key.
remove(Object key): Removes the mapping for a key if it is present.
containsKey(Object key): Returns true if the map contains a mapping for the specified key.
containsValue(Object value): Returns true if the map maps one or more keys to the specified value.
keySet(): Returns a Set view of the keys contained in this map.
values(): Returns a Collection view of the values contained in this map.
entrySet(): Returns a Set view of the mappings contained in this map.
HashMap
HashMap is a widely used implementation of the Map interface. It is backed by a hash table and provides constant-time performance for the basic operations (get and put), assuming the hash function disperses the elements properly among the buckets.

Key Points:

Implements Map, Cloneable, Serializable interfaces.
Allows null keys and values.
Does not maintain any order of elements.
Provides constant-time performance for basic operations, assuming a good hash function.
Example:

import java.util.HashMap;
import java.util.Map;

public class HashMapExample {
    public static void main(String[] args) {
        Map<String, Integer> hashMap = new HashMap<>();
        
        // Adding key-value pairs
        hashMap.put("One", 1);
        hashMap.put("Two", 2);
        hashMap.put("Three", 3);
        
        // Accessing values
        System.out.println("Value for key 'Two': " + hashMap.get("Two")); // Output: 2
        
        // Iterating over the map
        System.out.println("HashMap elements:");
        for (Map.Entry<String, Integer> entry : hashMap.entrySet()) {
            System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
        }
        
        // Checking if the map contains a key
        System.out.println("Contains key 'Three'? " + hashMap.containsKey("Three"));
        
        // Removing a key-value pair
        hashMap.remove("Two");
        System.out.println("After removing key 'Two': " + hashMap);
    }
}
TreeMap
TreeMap is an implementation of the Map interface that uses a Red-Black tree structure. It stores key-value pairs in a sorted order according to the natural ordering of the keys or by a specified comparator.

Key Points:

Implements NavigableMap, SortedMap, Map, Cloneable, Serializable interfaces.
Does not allow null keys.
Maintains elements in a sorted order.
Provides guaranteed log(n) time cost for the basic operations (get, put).
Example:

import java.util.Map;
import java.util.TreeMap;

public class TreeMapExample {
    public static void main(String[] args) {
        Map<String, Integer> treeMap = new TreeMap<>();
        
        // Adding key-value pairs
        treeMap.put("One", 1);
        treeMap.put("Two", 2);
        treeMap.put("Three", 3);
        
        // Accessing values
        System.out.println("Value for key 'Two': " + treeMap.get("Two")); // Output: 2
        
        // Iterating over the map
        System.out.println("TreeMap elements:");
        for (Map.Entry<String, Integer> entry : treeMap.entrySet()) {
            System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
        }
        
        // Checking if the map contains a key
        System.out.println("Contains key 'Three'? " + treeMap.containsKey("Three"));
        
        // Removing a key-value pair
        treeMap.remove("Two");
        System.out.println("After removing key 'Two': " + treeMap);
    }
}
Differences Between HashMap and TreeMap

Feature	            HashMap	                                TreeMap
Implementation	  Hash table (backed by                 Red-Black tree
                  HashMap)  
Order	          No guaranteed order                   Sorted order according to 
                                                        natural ordering or comparator

Performance      O(1) average time	                    O(log n) time
(Access)	
Performance      O(1) average time	                    O(log n) time
(Insert)	
Null Handling	Allows null keys and values	            Does not allow null keys
Use Case	    Best for quick lookups and              Best for maintaining 
                insertions                              sorted order and range queries



Summary
The Map interface in Java, along with its primary implementations HashMap and TreeMap, provides flexible and efficient ways to store and manipulate collections of key-value pairs. HashMap offers constant-time performance for basic operations and is best for quick lookups and insertions, while TreeMap maintains a sorted order of elements and is suitable for scenarios where sorted data is required. Choosing between HashMap and TreeMap depends on the specific requirements of your application regarding order and performance.







