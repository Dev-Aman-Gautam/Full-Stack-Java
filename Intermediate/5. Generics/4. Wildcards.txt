Wildcards in Generics
Wildcards in Java generics provide a way to use generics when you do not know the exact type. They are represented by the question mark (?) and can be used in three main forms: unbounded, upper-bounded, and lower-bounded wildcards. Each form has its own use cases and advantages.

Unbounded Wildcards
An unbounded wildcard is represented simply by a question mark (?). It can be used when you do not care about the type parameter.

Syntax:

List<?> list = new ArrayList<>();
Example:

import java.util.ArrayList;
import java.util.List;

public class UnboundedWildcardExample {
    public static void printList(List<?> list) {
        for (Object element : list) {
            System.out.println(element);
        }
    }

    public static void main(String[] args) {
        List<String> stringList = new ArrayList<>();
        stringList.add("Hello");
        stringList.add("World");

        List<Integer> intList = new ArrayList<>();
        intList.add(1);
        intList.add(2);

        printList(stringList);
        printList(intList);
    }
}
In this example, the printList method can accept a list of any type due to the unbounded wildcard (?).

Upper Bounded Wildcards
An upper bounded wildcard restricts the unknown type to be a specific type or a subtype of that type. It is specified using the extends keyword.

Syntax:

List<? extends Type>
Example:

import java.util.ArrayList;
import java.util.List;

public class UpperBoundedWildcardExample {
    public static void printNumbers(List<? extends Number> list) {
        for (Number number : list) {
            System.out.println(number);
        }
    }

    public static void main(String[] args) {
        List<Integer> intList = new ArrayList<>();
        intList.add(1);
        intList.add(2);

        List<Double> doubleList = new ArrayList<>();
        doubleList.add(3.14);
        doubleList.add(1.618);

        printNumbers(intList);
        printNumbers(doubleList);
    }
}
In this example, the printNumbers method can accept a list of any type that extends Number. This includes lists of Integer, Double, Float, etc.

Lower Bounded Wildcards
A lower bounded wildcard restricts the unknown type to be a specific type or a supertype of that type. It is specified using the super keyword.

Syntax:

List<? super Type>
Example:

import java.util.ArrayList;
import java.util.List;

public class LowerBoundedWildcardExample {
    public static void addNumbers(List<? super Integer> list) {
        list.add(1);
        list.add(2);
        list.add(3);
    }

    public static void main(String[] args) {
        List<Number> numberList = new ArrayList<>();
        addNumbers(numberList);
        System.out.println("Number List: " + numberList);
    }
}
In this example, the addNumbers method can accept a list of any type that is a superclass of Integer. This allows the method to add integers to the list safely.

Guidelines for Using Wildcards
Use ? extends T when you need to read items from a collection and don't need to modify it: This is known as a producer. You are only interested in retrieving elements of type T or its subclasses.

List<? extends Number> list = new ArrayList<Integer>();
Number n = list.get(0);
Use ? super T when you need to write items to a collection and don't need to read items from it: This is known as a consumer. You are interested in adding elements of type T or its superclasses.

List<? super Number> list = new ArrayList<Object>();
list.add(3.14); // Adding a Double
list.add(2);    // Adding an Integer
Use ? when you don't need to read from or write to a collection, or when you only need to perform operations that are independent of the specific type: This is useful when you are only performing operations that don't rely on the specific type.

List<?> list = new ArrayList<String>();
list.size(); // Safe operation
Wildcards and Methods
Method with Unbounded Wildcard:

public static void printElements(List<?> list) {
    for (Object element : list) {
        System.out.println(element);
    }
}
Method with Upper Bounded Wildcard:

public static void printNumbers(List<? extends Number> list) {
    for (Number number : list) {
        System.out.println(number);
    }
}
Method with Lower Bounded Wildcard:

public static void addIntegers(List<? super Integer> list) {
    list.add(1);
    list.add(2);
    list.add(3);
}
Summary
Wildcards in Java generics are a powerful tool for making your code more flexible and reusable. They allow you to write methods and classes that can operate on a range of types while maintaining type safety. Understanding when and how to use unbounded, upper bounded, and lower bounded wildcards can greatly enhance the robustness and flexibility of your generic code.