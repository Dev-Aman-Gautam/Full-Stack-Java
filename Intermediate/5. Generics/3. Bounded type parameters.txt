Bounded Type Parameters in Java
Bounded type parameters in Java allow you to restrict the types that can be used as arguments for type parameters. This is useful when you want to enforce constraints on the types that can be passed to a generic class, interface, or method. There are two main types of bounds:

Upper Bounds: Restrict the type to be a specific type or a subclass of a specific type.
Lower Bounds: Restrict the type to be a specific type or a superclass of a specific type.
Upper Bounded Type Parameters
Upper bounded type parameters use the extends keyword to specify that the type parameter must be a subclass of a specific class or implement a specific interface.

Syntax:

<T extends ClassOrInterface>
Example:

public class UpperBoundedExample {
    // Generic method with an upper bounded type parameter
    public static <T extends Number> void printNumber(T number) {
        System.out.println("Number: " + number);
    }

    public static void main(String[] args) {
        printNumber(10);    // Integer
        printNumber(3.14);  // Double
        printNumber(2.71f); // Float
        // printNumber("Hello"); // Compile-time error
    }
}
In this example, the printNumber method can accept any type that extends Number, such as Integer, Double, or Float. However, it will not accept types that do not extend Number, like String.

Lower Bounded Type Parameters
Lower bounded type parameters use the super keyword to specify that the type parameter must be a superclass of a specific class. Lower bounds are often used with wildcards in method arguments.

Syntax:

<T super Class>
Example:

import java.util.List;
import java.util.ArrayList;

public class LowerBoundedExample {
    // Method with a lower bounded wildcard
    public static void addNumbers(List<? super Integer> list) {
        list.add(1);
        list.add(2);
        list.add(3);
    }

    public static void main(String[] args) {
        List<Number> numberList = new ArrayList<>();
        addNumbers(numberList);
        System.out.println("Number List: " + numberList);
    }
}
In this example, the addNumbers method accepts a list of any type that is a superclass of Integer. This allows the method to add integers to the list safely. The List<Number> can hold Integer objects because Number is a superclass of Integer.

Multiple Bounds
You can also specify multiple bounds for a type parameter by using the & operator. This is useful when you want to restrict a type parameter to be a subclass of multiple classes or interfaces.

Syntax:

<T extends Class1 & Interface1 & Interface2>
Example:

interface Flyable {
    void fly();
}

class Bird {}

public class MultipleBoundsExample {
    // Generic class with multiple bounds
    public static <T extends Bird & Flyable> void printFlyingBird(T bird) {
        bird.fly();
        System.out.println("This bird can fly!");
    }

    public static void main(String[] args) {
        class Eagle extends Bird implements Flyable {
            @Override
            public void fly() {
                System.out.println("Eagle is flying");
            }
        }

        Eagle eagle = new Eagle();
        printFlyingBird(eagle);

        // Uncommenting the following lines will cause compile-time errors
        // class Penguin extends Bird {}
        // Penguin penguin = new Penguin();
        // printFlyingBird(penguin);
    }
}
In this example, the printFlyingBird method accepts a type parameter T that extends both Bird and Flyable. The Eagle class meets these requirements, so it can be passed to the method. However, a class like Penguin that only extends Bird but does not implement Flyable cannot be used with this method.

Summary
Bounded type parameters in Java provide a way to enforce constraints on the types that can be passed to generics. Upper bounds (extends) restrict the type to be a specific type or a subclass of a specific type, ensuring that certain methods and properties are available. Lower bounds (super) restrict the type to be a specific type or a superclass of a specific type, often used with wildcards to allow greater flexibility in method arguments. Multiple bounds allow combining several constraints, ensuring that the type parameter satisfies all specified conditions. By using bounded type parameters, you can create more robust and type-safe generic classes and methods.







