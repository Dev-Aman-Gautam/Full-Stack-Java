Generic Classes and Methods in Java
Generics allow you to define classes, interfaces, and methods with type parameters. This enables you to create more flexible and reusable code by allowing a single definition to operate on different data types.

Generic Classes
A generic class is defined with one or more type parameters. These type parameters act as placeholders for the types that the class will operate on. You can specify the type parameters using angle brackets (<>).

Example of a Generic Class:

public class Box<T> {
    private T content;

    public void setContent(T content) {
        this.content = content;
    }

    public T getContent() {
        return content;
    }

    public static void main(String[] args) {
        // Create a Box for String
        Box<String> stringBox = new Box<>();
        stringBox.setContent("Hello, Generics!");
        System.out.println("String content: " + stringBox.getContent());

        // Create a Box for Integer
        Box<Integer> integerBox = new Box<>();
        integerBox.setContent(123);
        System.out.println("Integer content: " + integerBox.getContent());
    }
}
In this example, Box<T> is a generic class with a type parameter T. This type parameter can be replaced with any type when creating an instance of Box.

Generic Methods
A generic method is a method that can operate on different types specified at the time of the method call. You define a generic method with one or more type parameters, similar to generic classes.

Example of a Generic Method:

public class GenericMethodExample {
    // Generic method to print elements of an array
    public static <T> void printArray(T[] array) {
        for (T element : array) {
            System.out.println(element);
        }
    }

    public static void main(String[] args) {
        Integer[] intArray = {1, 2, 3, 4, 5};
        String[] stringArray = {"Hello", "Generics", "World"};

        System.out.println("Integer Array:");
        printArray(intArray);

        System.out.println("String Array:");
        printArray(stringArray);
    }
}
In this example, printArray is a generic method that takes an array of any type and prints its elements. The type parameter T is specified before the return type (void).

Bounded Type Parameters
You can restrict the types that can be used with generics using bounded type parameters. This is useful when you want to ensure that the type parameter satisfies certain conditions, such as being a subclass of a particular class or implementing a specific interface.

Upper Bounded Type Parameter:

public class UpperBoundedExample {
    // Generic method with an upper bounded type parameter
    public static <T extends Number> void printNumber(T number) {
        System.out.println("Number: " + number);
    }

    public static void main(String[] args) {
        printNumber(10); // Integer
        printNumber(3.14); // Double
    }
}
In this example, printNumber is a generic method with an upper bounded type parameter T. The type parameter T must be a subclass of Number.

Lower Bounded Type Parameter:

import java.util.ArrayList;
import java.util.List;

public class LowerBoundedExample {
    // Generic method with a lower bounded type parameter
    public static void addNumbers(List<? super Integer> list) {
        list.add(1);
        list.add(2);
        list.add(3);
    }

    public static void main(String[] args) {
        List<Number> numberList = new ArrayList<>();
        addNumbers(numberList);
        System.out.println("Number List: " + numberList);
    }
}
In this example, addNumbers is a generic method with a lower bounded type parameter T. The type parameter T must be a superclass of Integer.

Wildcards in Generics
Wildcards are used to represent an unknown type. They are particularly useful when working with generics in methods where the exact type is not known.

Unbounded Wildcard:

import java.util.List;
import java.util.ArrayList;

public class UnboundedWildcardExample {
    // Method with unbounded wildcard
    public static void printList(List<?> list) {
        for (Object element : list) {
            System.out.println(element);
        }
    }

    public static void main(String[] args) {
        List<String> stringList = new ArrayList<>();
        stringList.add("Hello");
        stringList.add("World");

        List<Integer> intList = new ArrayList<>();
        intList.add(1);
        intList.add(2);

        printList(stringList);
        printList(intList);
    }
}
In this example, printList can accept a list of any type due to the unbounded wildcard (?).

Upper Bounded Wildcard:

import java.util.List;
import java.util.ArrayList;

public class UpperBoundedWildcardExample {
    // Method with upper bounded wildcard
    public static void printNumbers(List<? extends Number> list) {
        for (Number number : list) {
            System.out.println(number);
        }
    }

    public static void main(String[] args) {
        List<Integer> intList = new ArrayList<>();
        intList.add(1);
        intList.add(2);

        List<Double> doubleList = new ArrayList<>();
        doubleList.add(3.14);
        doubleList.add(1.618);

        printNumbers(intList);
        printNumbers(doubleList);
    }
}
In this example, printNumbers can accept a list of any type that extends Number due to the upper bounded wildcard (<? extends Number>).

Lower Bounded Wildcard:

import java.util.List;
import java.util.ArrayList;

public class LowerBoundedWildcardExample {
    // Method with lower bounded wildcard
    public static void addNumbers(List<? super Integer> list) {
        list.add(1);
        list.add(2);
        list.add(3);
    }

    public static void main(String[] args) {
        List<Number> numberList = new ArrayList<>();
        addNumbers(numberList);
        System.out.println("Number List: " + numberList);
    }
}
In this example, addNumbers can accept a list of any type that is a superclass of Integer due to the lower bounded wildcard (<? super Integer>).

Summary
Generics in Java provide powerful tools to create type-safe and reusable code. Generic classes and methods enable you to define classes and methods that can operate on any specified type, which increases flexibility and reduces the need for type casting. Bounded type parameters and wildcards further enhance the power of generics by allowing you to impose constraints and represent unknown types, respectively. By using generics, you can write more robust and maintainable code.





