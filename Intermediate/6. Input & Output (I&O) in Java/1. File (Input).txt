File Input in Java
In Java, file input refers to reading data from a file. The java.io package provides various classes for handling file input. Some of the commonly used classes for reading data from files are:

1. FileReader
2. BufferedReader
3. Scanner
Using FileReader and BufferedReader
FileReader is a class used for reading character files. BufferedReader is a wrapper around FileReader that provides buffering for efficient reading of characters, arrays, and lines.

Example:

import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;

public class FileReaderExample {
    public static void main(String[] args) {
        try {
            FileReader fileReader = new FileReader("example.txt");
            BufferedReader bufferedReader = new BufferedReader(fileReader);

            String line;
            while ((line = bufferedReader.readLine()) != null) {
                System.out.println(line);
            }

            bufferedReader.close();
            fileReader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
In this example, FileReader reads the file character by character, and BufferedReader reads text from a character-input stream, buffering characters for efficient reading.

Using Scanner
Scanner is a versatile class that can parse primitive types and strings using regular expressions. It can be used to read input from various sources, including files.

Example:

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class ScannerExample {
    public static void main(String[] args) {
        try {
            File file = new File("example.txt");
            Scanner scanner = new Scanner(file);

            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                System.out.println(line);
            }

            scanner.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }
}
In this example, Scanner reads the file line by line, and hasNextLine() checks if there is another line in the input.

Using FileInputStream and DataInputStream
FileInputStream is used for reading bytes from a file. DataInputStream is a data input stream that allows an application to read primitive Java data types from an underlying input stream.

Example:

import java.io.FileInputStream;
import java.io.DataInputStream;
import java.io.IOException;

public class FileInputStreamExample {
    public static void main(String[] args) {
        try {
            FileInputStream fileInputStream = new FileInputStream("example.txt");
            DataInputStream dataInputStream = new DataInputStream(fileInputStream);

            while (dataInputStream.available() > 0) {
                System.out.println(dataInputStream.readLine());
            }

            dataInputStream.close();
            fileInputStream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
In this example, FileInputStream reads raw byte streams, and DataInputStream reads Java primitive data types from the input stream.

Handling Exceptions
When dealing with file input in Java, it's important to handle exceptions properly. The main exceptions you might encounter are:

FileNotFoundException: Thrown when a file with the specified pathname does not exist.
IOException: Thrown when an I/O operation fails or is interrupted.
Example with Exception Handling

import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;

public class FileReaderWithExceptionHandling {
    public static void main(String[] args) {
        BufferedReader bufferedReader = null;
        FileReader fileReader = null;

        try {
            fileReader = new FileReader("example.txt");
            bufferedReader = new BufferedReader(fileReader);

            String line;
            while ((line = bufferedReader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (bufferedReader != null) {
                    bufferedReader.close();
                }
                if (fileReader != null) {
                    fileReader.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
}
In this example, finally blocks are used to ensure that resources are closed properly, even if an exception occurs.

Summary
Reading from files in Java is a common task that can be accomplished using several classes from the java.io package. Depending on the specific needs, you can choose from FileReader and BufferedReader for character-based reading, Scanner for versatile input parsing, or FileInputStream and DataInputStream for byte-based reading. Proper exception handling ensures that resources are managed correctly and any potential errors are handled gracefully.





