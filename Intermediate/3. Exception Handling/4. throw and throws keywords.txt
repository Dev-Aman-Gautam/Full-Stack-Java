In Java, the throw and throws keywords are used for exception handling but serve different purposes. Understanding these keywords is crucial for properly managing exceptions in your Java programs.

throw Keyword
The throw keyword is used to explicitly throw an exception in your code. You can use it to throw both checked and unchecked exceptions.

Syntax:

throw new ExceptionType("Error message");
Example:


public class ThrowExample {
    public static void main(String[] args) {
        try {
            validateAge(15); // This will throw an exception
        } catch (IllegalArgumentException e) {
            System.out.println("Exception caught: " + e.getMessage());
        }
    }

    public static void validateAge(int age) {
        if (age < 18) {
            throw new IllegalArgumentException("Age must be 18 or older");
        }
        System.out.println("Valid age");
    }
}
In this example:

The validateAge method checks if the provided age is less than 18.
If the age is less than 18, it throws an IllegalArgumentException using the throw keyword.
The exception is caught in the catch block in the main method.
throws Keyword
The throws keyword is used in a method signature to declare that the method can throw one or more exceptions. This informs the caller of the method about the exceptions that might be thrown, allowing the caller to handle them.

Syntax:

public returnType methodName() throws ExceptionType1, ExceptionType2 {
    // Method code
}
Example:

import java.io.*;

public class ThrowsExample {
    public static void main(String[] args) {
        try {
            readFile("example.txt");
        } catch (IOException e) {
            System.out.println("Exception caught: " + e.getMessage());
        }
    }

    // This method declares that it can throw an IOException
    public static void readFile(String filename) throws IOException {
        FileReader file = new FileReader(filename);
        BufferedReader reader = new BufferedReader(file);
        String line;
        while ((line = reader.readLine()) != null) {
            System.out.println(line);
        }
        reader.close();
    }
}
In this example:

The readFile method declares that it can throw an IOException using the throws keyword.
The main method handles this exception in a try-catch block.
Differences Between throw and throws
Purpose:

throw: Used to actually throw an instance of an exception.
throws: Used to declare that a method might throw one or more exceptions.
Usage:

throw: Followed by an instance of Throwable (either directly or via a subclass like Exception or RuntimeException).
throws: Used in a method signature to specify potential exceptions.
Location:

throw: Used inside a method or block of code.
throws: Used in the method signature.
Exception Type:

throw: Can be used to throw both checked and unchecked exceptions.
throws: Typically used to declare checked exceptions, although unchecked exceptions can also be declared.
Combining throw and throws
You can combine throw and throws in a method to throw an exception and declare it. Hereâ€™s an example:

import java.io.*;

public class CombinedExample {
    public static void main(String[] args) {
        try {
            readFile("example.txt");
        } catch (FileNotFoundException e) {
            System.out.println("Exception caught: " + e.getMessage());
        } catch (IOException e) {
            System.out.println("Exception caught: " + e.getMessage());
        }
    }

    // This method declares that it can throw an IOException
    public static void readFile(String filename) throws IOException {
        FileReader file = new FileReader(filename); // Can throw FileNotFoundException
        BufferedReader reader = new BufferedReader(file);
        String line;
        while ((line = reader.readLine()) != null) {
            System.out.println(line);
        }
        reader.close();
    }
}
In this example:

The readFile method can throw an IOException, which includes FileNotFoundException.
The main method handles both FileNotFoundException and IOException separately.
Summary
throw: Used to explicitly throw an exception from within a method or block of code. It requires an instance of Throwable or its subclass.
throws: Used in method signatures to declare that the method might throw specified exceptions. It informs the caller to handle or propagate these exceptions.
Understanding and correctly using throw and throws is essential for robust error handling and for writing maintainable Java code.







