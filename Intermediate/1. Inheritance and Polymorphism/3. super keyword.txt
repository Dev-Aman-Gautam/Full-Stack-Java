In Java, the super keyword is used to refer to the superclass (parent class) of the current object. It can be used in several contexts within a subclass to access superclass methods, constructors, and variables. Understanding how and when to use super is essential for leveraging inheritance effectively. Let's explore the various uses of the super keyword in Java:

1. Accessing Superclass Members
You can use super to access members (fields and methods) of the superclass from within the subclass. This is particularly useful when you want to differentiate between superclass and subclass members with the same name.

Example:

// Superclass
class Animal {
    String name = "Animal";
    
    void display() {
        System.out.println("Superclass: " + name);
    }
}

// Subclass inheriting from Animal
class Dog extends Animal {
    String name = "Dog";
    
    void display() {
        System.out.println("Subclass: " + name); // Accessing subclass variable
        System.out.println("Superclass: " + super.name); // Accessing superclass variable using super
    }
    
    void displayName() {
        display(); // Calls the subclass display method
        super.display(); // Calls the superclass display method
    }
}

public class Main {
    public static void main(String[] args) {
        Dog myDog = new Dog();
        myDog.displayName();
    }
}
Output:
makefile
Copy code
Subclass: Dog
Superclass: Animal
Superclass: Animal
In the example:

The Dog class has a name variable that hides the name variable from the superclass Animal.
Inside the display() method of Dog, super.name refers to the name variable of the superclass Animal.
super.display() calls the display() method of the superclass Animal from within the Dog class.


2. Invoking Superclass Constructors
Using super(), you can explicitly call a constructor of the superclass from the constructor of the subclass. This is useful when the superclass constructor needs to be executed before the subclass constructor starts its own initialization.

Example:


// Superclass
class Animal {
    String type;
    
    Animal(String type) {
        this.type = type;
    }
    
    void display() {
        System.out.println("Type: " + type);
    }
}

// Subclass inheriting from Animal
class Dog extends Animal {
    String name;
    
    Dog(String type, String name) {
        super(type); // Call to superclass constructor
        this.name = name;
    }
    
    void display() {
        super.display(); // Calls superclass display method
        System.out.println("Name: " + name);
    }
}

public class Main {
    public static void main(String[] args) {
        Dog myDog = new Dog("Mammal", "Buddy");
        myDog.display();
    }
}
Output:
makefile
Copy code
Type: Mammal
Name: Buddy
In the example:

The Dog class constructor uses super(type) to call the constructor of the superclass Animal with the type parameter.
super.display() calls the display() method of the superclass Animal from within the Dog class.


3. Invoking Superclass Method from Subclass
You can also use super to invoke a method from the superclass that has been overridden in the subclass. This can be useful to extend or modify the behavior of the superclass method.

Example:


// Superclass
class Animal {
    void makeSound() {
        System.out.println("Generic sound");
    }
}

// Subclass
class Dog extends Animal {
    @Override
    void makeSound() {
        super.makeSound(); // Calls superclass method
        System.out.println("Bark bark!");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog myDog = new Dog();
        myDog.makeSound();
    }
}
Output:
mathematica
Copy code
Generic sound
Bark bark!
In the example:

The Dog class overrides the makeSound() method from the superclass Animal.
super.makeSound() within Dog calls the makeSound() method of the superclass Animal.


Key Points
1. Accessing Members: super allows access to superclass members (fields, methods) when they are hidden by subclass members.
2. Constructor Invocation: super() invokes the constructor of the superclass from the subclass constructor.
3. Method Overriding: super can be used to invoke superclass methods that have been overridden in the subclass.


The super keyword in Java is crucial for managing relationships between superclass and subclass, enabling efficient code reuse and facilitating constructor chaining and method invocation in inheritance hierarchies. Understanding its usage enhances the flexibility and maintainability of Java programs, particularly in object-oriented designs.







