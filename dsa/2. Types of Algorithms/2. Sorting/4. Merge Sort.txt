
Merge Sort is a divide-and-conquer algorithm for sorting arrays. It works by dividing the array into two halves, recursively sorting each half, and then merging the sorted halves to produce a sorted array.

How Merge Sort Works
Divide: Divide the unsorted array into two halves recursively until each subarray contains only one element (a single element is inherently sorted).
Conquer: Merge the smaller sorted arrays (left and right halves) back together to form a single sorted array.
Merge Operation: Combine two sorted arrays into one sorted array by comparing the elements one by one.
Pseudocode for Merge Sort
Here is the pseudocode for Merge Sort:

function mergeSort(array):
    n = length(array)
    if n <= 1:
        return array
    
    // Divide the array into two halves
    middle = floor(n / 2)
    left = mergeSort(array[0...middle-1])
    right = mergeSort(array[middle...n-1])
    
    // Merge the two sorted halves
    return merge(left, right)
    
function merge(left, right):
    result = []
    while left is not empty and right is not empty:
        if left[0] <= right[0]:
            result.append(left[0])
            left = left[1...]
        else:
            result.append(right[0])
            right = right[1...]
    
    // Append any remaining elements
    while left is not empty:
        result.append(left[0])
        left = left[1...]
        
    while right is not empty:
        result.append(right[0])
        right = right[1...]
    
    return result
Detailed Example
Let's consider an example to illustrate Merge Sort:

Input Array: [38, 27, 43, 3, 9, 82, 10]
Step-by-Step Process:

Initial Array: [38, 27, 43, 3, 9, 82, 10]

Divide and Conquer:

Divide the array into two halves: [38, 27, 43, 3] and [9, 82, 10]
Recursively divide each half until each subarray contains one element.
Merge Operation:

Merge [38] and [27] to get [27, 38]
Merge [43] and [3] to get [3, 43]
Merge [27, 38] and [3, 43] to get [3, 27, 38, 43]
Merge [9] and [82] to get [9, 82]
Merge [10] with [9, 82] to get [9, 10, 82]
Merge [3, 27, 38, 43] with [9, 10, 82] to get [3, 9, 10, 27, 38, 43, 82]
Sorted Array: [3, 9, 10, 27, 38, 43, 82]

Implementation in Python
Here is a Python implementation of Merge Sort:

def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    
    # Divide the array into two halves
    mid = len(arr) // 2
    left_half = merge_sort(arr[:mid])
    right_half = merge_sort(arr[mid:])
    
    # Merge the two sorted halves
    return merge(left_half, right_half)

def merge(left, right):
    result = []
    i = j = 0
    
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    
    # Append remaining elements
    result.extend(left[i:])
    result.extend(right[j:])
    
    return result

# Example usage:
arr = [38, 27, 43, 3, 9, 82, 10]
sorted_arr = merge_sort(arr)
print("Sorted array:", sorted_arr)
Time Complexity
Best Case: O(n log n) - when the array is already or nearly sorted.
Average Case: O(n log n)
Worst Case: O(n log n)
Merge Sort is efficient and stable but requires additional space for the temporary arrays used during the merge operation, making it less suitable for memory-constrained environments compared to in-place algorithms like Quick Sort.

Space Complexity
Space Complexity: O(n) - Merge Sort requires additional space for storing temporary arrays during the merge operation, which impacts its space complexity.
Use Cases and Limitations
Use Cases:

General Purpose: Suitable for a wide range of input data sizes and types.
Stable Sorting: Maintains the relative order of equal elements, making it useful when stability is required.
Limitations:

Space Complexity: Requires additional space proportional to the size of the input array due to the temporary arrays used in the merge process.
Not In-Place: Unlike algorithms like Quick Sort, Merge Sort is not in-place, which means it may not be suitable for sorting large datasets on memory-constrained systems.
Merge Sort is a widely used sorting algorithm due to its stable performance across different input scenarios. It is particularly favored when stability in sorting order and predictable performance are priorities.