
Selection Sort Algorithm
Selection sort is a simple comparison-based sorting algorithm. It divides the input list into two parts: the sorted part and the unsorted part. It repeatedly selects the smallest (or largest, depending on the sorting order) element from the unsorted part and swaps it with the leftmost unsorted element, thereby growing the sorted part one element at a time.

How Selection Sort Works
Initial Setup: Start with the entire array considered as unsorted.
Finding the Minimum:
Iterate through the unsorted part of the array to find the smallest element.
Swap Elements:
Swap the smallest element found with the leftmost unsorted element.
Repeat: Continue this process, moving the boundary between the sorted and unsorted parts one element to the right each time.
Termination: The algorithm terminates once the entire array has been sorted.
Pseudocode for Selection Sort
Here's a pseudocode representation of selection sort:

function selectionSort(array):
    n = length(array)
    
    for i from 0 to n-1:
        min_index = i
        for j from i+1 to n-1:
            if array[j] < array[min_index]:
                min_index = j
        
        // Swap the minimum element with the first element of the unsorted part
        swap(array[min_index], array[i])
Detailed Example
Let's illustrate selection sort with an example:

Input Array: [64, 25, 12, 22, 11]
Steps:
Initial Array: [64, 25, 12, 22, 11]

Start with the first element (64) as the minimum.
After First Pass:

Find the smallest element in the remaining array (11).
Swap 11 with the first element (64).
Array becomes: [11, 25, 12, 22, 64]
After Second Pass:

Find the smallest element in the remaining array (12).
Swap 12 with the second element (25).
Array becomes: [11, 12, 25, 22, 64]
After Third Pass:

Find the smallest element in the remaining array (22).
Swap 22 with the third element (25).
Array becomes: [11, 12, 22, 25, 64]
After Fourth Pass:

Find the smallest element in the remaining array (25).
Swap 25 with the fourth element (64).
Array becomes: [11, 12, 22, 25, 64]
Array is Sorted: No more passes needed as the array is now sorted.

Time Complexity
Time Complexity: O(n^2), where n is the number of elements in the array.
Selection sort performs n-1 comparisons in the first pass, n-2 in the second pass, and so on, resulting in approximately n(n-1)/2 comparisons.
However, the number of swaps required is O(n), making it beneficial when the cost of swapping elements is significant compared to comparisons.
Space Complexity
Space Complexity: O(1) - Selection sort is an in-place sorting algorithm that requires only a constant amount of additional space for variables.
Key Points
Selection sort is straightforward and easy to implement but not efficient for large datasets due to its O(n^2) time complexity.
It is not adaptive, meaning its performance does not improve even if the input is partially sorted.
Selection sort is unstable because it does not preserve the relative order of equal elements.
Despite its drawbacks in efficiency, selection sort can be useful for sorting small datasets or as a building block in more complex sorting algorithms. Its simplicity makes it a good educational example of a sorting algorithm.


Implementation of Selection Sort in Python

def selection_sort(arr):
    n = len(arr)
    
    # Traverse through all array elements
    for i in range(n):
        # Find the minimum element in remaining unsorted array
        min_idx = i
        for j in range(i + 1, n):
            if arr[j] < arr[min_idx]:
                min_idx = j
                
        # Swap the found minimum element with the first element of the unsorted array
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    
    return arr

# Example usage:
arr = [64, 25, 12, 22, 11]
sorted_arr = selection_sort(arr)
print("Sorted array:", sorted_arr)
Explanation:
Initialization: Start with the entire array. n is the length of the array.
Outer Loop: Iterate through each element of the array using i.
Inner Loop: Within each iteration of the outer loop (i), find the index (min_idx) of the smallest element in the unsorted part of the array (starting from i).
Swap: Swap the smallest element (found in the inner loop) with the current element (arr[i]).
Repeat: Continue this process until the array is fully sorted.
Example Walkthrough:
Given the array [64, 25, 12, 22, 11], here's how Selection Sort would sort it:

Iteration 1: [11, 25, 12, 22, 64] (11 is the smallest, swapped with 64)
Iteration 2: [11, 12, 25, 22, 64] (12 is the smallest in remaining, swapped with 25)
Iteration 3: [11, 12, 22, 25, 64] (22 is the smallest in remaining, swapped with 25)
Iteration 4: [11, 12, 22, 25, 64] (25 is already in place)
Iteration 5: [11, 12, 22, 25, 64] (64 is already in place)
Time Complexity:
Best Case: O(n^2)
Average Case: O(n^2)
Worst Case: O(n^2)
Selection sort is not efficient for large datasets due to its quadratic time complexity, but it's simple to implement and understand. It's mainly used for educational purposes or for sorting small datasets where simplicity is more important than efficiency.





