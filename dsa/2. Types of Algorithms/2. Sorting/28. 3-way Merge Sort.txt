Certainly! 3-way Merge Sort is an extension of the traditional Merge Sort algorithm that divides the array into three parts instead of two during the sorting process. This allows for efficient handling of arrays with a large number of duplicate elements.

How 3-way Merge Sort Works
Divide Phase: Divide the array into three parts instead of two. Calculate two midpoints instead of one.

Recursion: Recursively sort each of the three parts using 3-way Merge Sort.

Merge Phase: Merge the three sorted parts back together into a single sorted array.

Pseudocode for 3-way Merge Sort
Here's a pseudocode implementation of 3-way Merge Sort:

function mergeSort3Way(arr):
    if length(arr) > 1:
        mid1 = length(arr) // 3
        mid2 = 2 * (length(arr) // 3) + 1
        
        left_part = arr[0...mid1]
        middle_part = arr[mid1+1...mid2]
        right_part = arr[mid2+1...end]
        
        // Recursive calls for sorting each part
        mergeSort3Way(left_part)
        mergeSort3Way(middle_part)
        mergeSort3Way(right_part)
        
        // Merge sorted parts back together
        merge(arr, left_part, middle_part, right_part)
Merge Function
The merge function merges three sorted arrays into one sorted array:

function merge(arr, left_part, middle_part, right_part):
    // Indices for merging
    i, j, k = 0, 0, 0
    
    // Compare elements in left_part, middle_part, and right_part
    while i < length(left_part) and j < length(middle_part) and k < length(right_part):
        if left_part[i] <= middle_part[j] and left_part[i] <= right_part[k]:
            arr[i + j + k] = left_part[i]
            i += 1
        elif middle_part[j] <= left_part[i] and middle_part[j] <= right_part[k]:
            arr[i + j + k] = middle_part[j]
            j += 1
        else:
            arr[i + j + k] = right_part[k]
            k += 1
    
    // Copy remaining elements if any
    while i < length(left_part):
        arr[i + j + k] = left_part[i]
        i += 1
    while j < length(middle_part):
        arr[i + j + k] = middle_part[j]
        j += 1
    while k < length(right_part):
        arr[i + j + k] = right_part[k]
        k += 1
Example Execution
Let's consider an example to illustrate 3-way Merge Sort:

Input Array: [12, 2, 4, 2, 23, 8, 3, 14, 7, 5, 11, 9]
Step-by-Step Process:

Initial Array: [12, 2, 4, 2, 23, 8, 3, 14, 7, 5, 11, 9]

First Recursive Call:

Divide array into three parts: [12, 2, 4], [2, 23, 8], and [3, 14, 7, 5, 11, 9].
Sort recursively: [2, 2, 4, 8, 12, 23], [3, 5, 7, 9, 11, 14], and [2].
Merge Phase:

Merge sorted parts: [2, 2, 2, 3, 4, 5, 7, 8, 9, 11, 12, 14, 23].
Characteristics
Time Complexity: O(n log n) in the average and worst case scenarios, where n is the number of elements in the array. This is because each merge operation takes linear time and the recursion depth is logarithmic.

Space Complexity: O(n) due to the auxiliary space required for the merge operation.

Stability: 3-way Merge Sort is stable as it maintains the relative order of equal elements during sorting.

Use Cases
Large Datasets: Suitable for sorting large datasets efficiently.

Duplicate Elements: Efficiently handles arrays with a large number of duplicate elements compared to traditional Merge Sort.

Implementation in Python
Here's a Python implementation of 3-way Merge Sort:

def mergeSort3Way(arr):
    if len(arr) > 1:
        mid1 = len(arr) // 3
        mid2 = 2 * (len(arr) // 3) + 1
        
        left_part = arr[:mid1]
        middle_part = arr[mid1:mid2]
        right_part = arr[mid2:]
        
        mergeSort3Way(left_part)
        mergeSort3Way(middle_part)
        mergeSort3Way(right_part)
        
        merge(arr, left_part, middle_part, right_part)

def merge(arr, left_part, middle_part, right_part):
    i = j = k = 0
    
    while i < len(left_part) and j < len(middle_part) and k < len(right_part):
        if left_part[i] <= middle_part[j] and left_part[i] <= right_part[k]:
            arr[i + j + k] = left_part[i]
            i += 1
        elif middle_part[j] <= left_part[i] and middle_part[j] <= right_part[k]:
            arr[i + j + k] = middle_part[j]
            j += 1
        else:
            arr[i + j + k] = right_part[k]
            k += 1
    
    while i < len(left_part):
        arr[i + j + k] = left_part[i]
        i += 1
    while j < len(middle_part):
        arr[i + j + k] = middle_part[j]
        j += 1
    while k < len(right_part):
        arr[i + j + k] = right_part[k]
        k += 1

# Example usage:
arr = [12, 2, 4, 2, 23, 8, 3, 14, 7, 5, 11, 9]
print("Original Array:", arr)

mergeSort3Way(arr)
print("Sorted Array:", arr)
This implementation recursively divides the array into three parts, sorts each part, and then merges them back together using the merge function. It demonstrates the effectiveness of 3-way Merge Sort in handling diverse datasets efficiently.