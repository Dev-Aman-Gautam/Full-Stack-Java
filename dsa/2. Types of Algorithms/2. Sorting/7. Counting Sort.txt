
Counting Sort is an integer sorting algorithm that operates by counting the number of occurrences of each distinct element in the input array and using this information to place each element in its correct sorted position. It only works for non-negative integers or can be modified slightly to handle other types of data.

How Counting Sort Works
Counting Frequencies: Count the number of occurrences of each unique element in the input array.

Cumulative Count: Compute the cumulative count of each element, which gives the starting index for each element in the sorted array.

Place Elements: Iterate through the input array and place each element in its correct sorted position using the cumulative count array to determine the index.

Pseudocode for Counting Sort
Here is the pseudocode for Counting Sort:

function countingSort(array, k):
    n = length(array)
    output = [0] * n
    count = [0] * (k + 1)  # Initialize count array with zeros
    
    # Store count of each element
    for i from 0 to n - 1:
        count[array[i]] += 1
    
    # Modify the count array to store the actual position of each element in output
    for i from 1 to k:
        count[i] += count[i - 1]
    
    # Build the output array
    for i from n - 1 down to 0:
        output[count[array[i]] - 1] = array[i]
        count[array[i]] -= 1
    
    # Copy the sorted elements into the original array
    for i from 0 to n - 1:
        array[i] = output[i]
Detailed Example
Let's consider an example to illustrate Counting Sort:

Input Array: [4, 2, 2, 8, 3, 3, 1]
Step-by-Step Process:

Initial Setup:
Input Array: [4, 2, 2, 8, 3, 3, 1]
Count Array: [0, 0, 0, 0, 0, 0, 0, 0, 0] (for elements from 0 to 8)
Count Frequencies:
Count occurrences of each element: [0, 1, 2, 2, 1, 0, 0, 0, 1]
Cumulative Count:
Modify the count array to store cumulative counts: [0, 1, 3, 5, 6, 6, 6, 6, 7]
Build Output Array:
Place elements in the output array based on their cumulative counts: [1, 2, 2, 3, 3, 4, 8]
Sorted Array: [1, 2, 2, 3, 3, 4, 8]
Implementation in Python
Here is a Python implementation of Counting Sort:

def counting_sort(arr):
    n = len(arr)
    max_element = max(arr)
    output = [0] * n
    count = [0] * (max_element + 1)
    
    # Count frequencies of each element
    for num in arr:
        count[num] += 1
    
    # Compute cumulative count
    for i in range(1, max_element + 1):
        count[i] += count[i - 1]
    
    # Build the output array
    for num in reversed(arr):
        output[count[num] - 1] = num
        count[num] -= 1
    
    # Copy the sorted elements into the original array
    for i in range(n):
        arr[i] = output[i]

# Example usage:
arr = [4, 2, 2, 8, 3, 3, 1]
counting_sort(arr)
print("Sorted array:", arr)
Time Complexity
Time Complexity: O(n + k), where n is the number of elements in the input array and k is the range of the input.
Space Complexity
Space Complexity: O(n + k), where n is the number of elements in the input array and k is the range of the input.
Use Cases and Limitations
Use Cases:

Small Range of Input: Efficient for sorting integers when the range of values (k) is not significantly larger than the number of elements (n).
Linear Time Complexity: Provides linear time complexity when the range of input values is not very large.
Limitations:

Large Range of Input: Not suitable for sorting data with a very large range of input values due to space complexity concerns.
Non-integer Input: Requires modification to handle non-integer data types.
Counting Sort is a linear time sorting algorithm that is efficient for small ranges of input values and provides a good alternative to comparison-based sorting algorithms like Quick Sort and Merge Sort in certain scenarios.