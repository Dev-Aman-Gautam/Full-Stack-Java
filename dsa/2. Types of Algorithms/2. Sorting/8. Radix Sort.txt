Radix Sort is a non-comparative integer sorting algorithm that sorts numbers by processing individual digits. It sorts numbers digit by digit, starting from the least significant digit (LSD) to the most significant digit (MSD). Radix Sort can be implemented using either the LSD (Least Significant Digit) or MSD (Most Significant Digit) approach.

How Radix Sort Works
LSD Radix Sort:

Sort the numbers by their least significant digit (units place), then by the next more significant digit (tens place), and so on, until the most significant digit is sorted.
MSD Radix Sort:

Sort the numbers by their most significant digit (leftmost digit), then by the next less significant digit, and so on, until the least significant digit is sorted.
Pseudocode for LSD Radix Sort
Here is the pseudocode for LSD Radix Sort:

function radixSortLSD(array):
    max_value = max(array)
    exp = 1
    
    while max_value / exp > 0:
        countingSortByDigit(array, exp)
        exp *= 10

function countingSortByDigit(array, exp):
    n = len(array)
    output = [0] * n
    count = [0] * 10
    
    # Count frequencies of each digit (0-9)
    for i in range(n):
        digit = (array[i] // exp) % 10
        count[digit] += 1
    
    # Compute cumulative count
    for i in range(1, 10):
        count[i] += count[i - 1]
    
    # Build the output array
    for i in range(n - 1, -1, -1):
        digit = (array[i] // exp) % 10
        output[count[digit] - 1] = array[i]
        count[digit] -= 1
    
    # Copy the sorted elements into the original array
    for i in range(n):
        array[i] = output[i]
Detailed Example
Let's consider an example to illustrate Radix Sort (LSD):

Input Array: [170, 45, 75, 90, 802, 24, 2, 66]
Step-by-Step Process:

Initial Setup:
Input Array: [170, 45, 75, 90, 802, 24, 2, 66]
Maximum value: 802
Start with exp = 1
First Pass (Units Place):
Perform counting sort based on the units place (exp = 1):
Sorted by units place: [170, 90, 802, 2, 24, 45, 75, 66]
Second Pass (Tens Place):
Perform counting sort based on the tens place (exp = 10):
Sorted by tens place: [802, 2, 24, 45, 66, 75, 170, 90]
Third Pass (Hundreds Place):
Perform counting sort based on the hundreds place (exp = 100):
Already sorted: [2, 24, 45, 66, 75, 90, 170, 802]
Sorted Array: [2, 24, 45, 66, 75, 90, 170, 802]
Implementation in Python
Here is a Python implementation of Radix Sort (LSD):

def radix_sort_lsd(arr):
    max_value = max(arr)
    exp = 1
    
    while max_value / exp > 0:
        counting_sort_by_digit(arr, exp)
        exp *= 10

def counting_sort_by_digit(arr, exp):
    n = len(arr)
    output = [0] * n
    count = [0] * 10
    
    # Count frequencies of each digit (0-9)
    for i in range(n):
        digit = (arr[i] // exp) % 10
        count[digit] += 1
    
    # Compute cumulative count
    for i in range(1, 10):
        count[i] += count[i - 1]
    
    # Build the output array
    for i in range(n - 1, -1, -1):
        digit = (arr[i] // exp) % 10
        output[count[digit] - 1] = arr[i]
        count[digit] -= 1
    
    # Copy the sorted elements into the original array
    for i in range(n):
        arr[i] = output[i]

# Example usage:
arr = [170, 45, 75, 90, 802, 24, 2, 66]
radix_sort_lsd(arr)
print("Sorted array:", arr)
Time Complexity
Time Complexity: O(d * (n + k)), where d is the number of digits in the largest number, n is the number of elements in the array, and k is the range of the input (typically 10 for decimal digits).
Space Complexity
Space Complexity: O(n + k), where n is the number of elements in the input array and k is the range of the input.
Use Cases and Limitations
Use Cases:

Fixed Length Integer Sorting: Efficient for sorting integers when the length of the integers is fixed or known.
Linear Time Complexity: Provides linear time complexity when the number of digits (d) is constant.
Limitations:

Non-Integer Input: Radix Sort is limited to sorting non-negative integers or requires modification to handle other types of data.
Space Complexity: Requires additional space proportional to the size of the input and the range of the input values.
Radix Sort is particularly useful for sorting integers with a fixed or bounded number of digits. It achieves linear time complexity in many cases and is a stable sorting algorithm, meaning it preserves the relative order of equal elements.





