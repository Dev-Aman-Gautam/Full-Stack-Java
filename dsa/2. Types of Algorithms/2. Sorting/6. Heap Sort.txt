
Heap Sort is a comparison-based sorting algorithm that uses a binary heap data structure. It works by building a max heap (for ascending order sorting) or a min heap (for descending order sorting) from the array and repeatedly extracting the root element (which is the maximum for max heap and minimum for min heap) and rebuilding the heap until the array is sorted.

How Heap Sort Works
Build Heap: Build a max heap (or min heap) from the array. This involves rearranging the elements of the array so that each parent node is greater (or smaller) than its children nodes.

Heapify: Repeatedly remove the root (which is the maximum for max heap or minimum for min heap) and rebuild the heap. After removing the root element, swap it with the last element in the heap and reduce the heap size. Then, heapify the root of the tree to maintain the heap property.

Repeat: Repeat step 2 until the heap size is reduced to 1. The array elements will now be sorted.

Pseudocode for Heap Sort
Here is the pseudocode for Heap Sort:

function heapSort(array):
    n = length(array)
    
    # Build max heap
    for i from n/2 - 1 down to 0:
        heapify(array, n, i)
    
    # Extract elements from heap one by one
    for i from n-1 down to 1:
        swap array[0] with array[i]
        heapify(array, i, 0)

function heapify(array, n, i):
    largest = i  # Initialize largest as root
    left = 2 * i + 1
    right = 2 * i + 2
    
    # If left child is larger than root
    if left < n and array[left] > array[largest]:
        largest = left
    
    # If right child is larger than root
    if right < n and array[right] > array[largest]:
        largest = right
    
    # If largest is not root
    if largest != i:
        swap array[i] with array[largest]
        heapify(array, n, largest)
Detailed Example
Let's consider an example to illustrate Heap Sort:

Input Array: [12, 11, 13, 5, 6, 7]
Step-by-Step Process:

Build Max Heap:
Start with the array: [12, 11, 13, 5, 6, 7]
Convert the array into a max heap: [13, 11, 12, 5, 6, 7]
Heapify:
Remove the root element (13) and swap it with the last element in the heap (7).
Heapify the root to maintain the max heap property: [12, 11, 7, 5, 6, 13]
Repeat Heapify:
Remove the root element (12) and swap it with the last element in the heap (6).
Heapify the root: [11, 6, 7, 5, 12, 13]
Continue this process until the entire array is sorted.
Sorted Array: [5, 6, 7, 11, 12, 13]
Implementation in Python
Here is a Python implementation of Heap Sort:

def heap_sort(arr):
    n = len(arr)
    
    # Build max heap
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)
    
    # Extract elements from heap one by one
    for i in range(n - 1, 0, -1):
        arr[0], arr[i] = arr[i], arr[0]  # Swap root (max element) with last element
        heapify(arr, i, 0)  # Heapify root element
    
    return arr

def heapify(arr, n, i):
    largest = i  # Initialize largest as root
    left = 2 * i + 1
    right = 2 * i + 2
    
    # Check if left child exists and is larger than root
    if left < n and arr[left] > arr[largest]:
        largest = left
    
    # Check if right child exists and is larger than root
    if right < n and arr[right] > arr[largest]:
        largest = right
    
    # If largest is not root, swap and recursively heapify the affected subtree
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)

# Example usage:
arr = [12, 11, 13, 5, 6, 7]
sorted_arr = heap_sort(arr)
print("Sorted array:", sorted_arr)
Time Complexity
Best Case: O(n log n) - when the elements are already sorted.
Average Case: O(n log n)
Worst Case: O(n log n)
Space Complexity
Space Complexity: O(1) - Heap Sort is an in-place sorting algorithm.
Use Cases and Limitations
Use Cases:

General Purpose: Suitable for a wide range of input data sizes and types.
In-Place Sorting: It can be implemented in-place with O(1) extra space for the heap.
Limitations:

Not Stable: Heap Sort is not a stable sorting algorithm, meaning it may change the relative order of equal elements.
Not Adaptive: Does not take advantage of existing order in the input data.
Heap Sort is efficient and can be faster than Merge Sort for certain types of input data. It is particularly useful when stable sorting is not a requirement and when in-place sorting is desired.