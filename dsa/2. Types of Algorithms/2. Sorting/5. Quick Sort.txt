
Quick Sort is a popular comparison-based sorting algorithm that follows the divide-and-conquer paradigm. It works by selecting a pivot element from the array and partitioning the other elements into two sub-arrays according to whether they are less than or greater than the pivot. The sub-arrays are then recursively sorted.

How Quick Sort Works
Choose Pivot: Select a pivot element from the array. Various methods can be used to choose the pivot, such as picking the first element, the last element, a random element, or a median-of-three approach.

Partitioning: Rearrange the array such that all elements less than the pivot are on its left, and all elements greater than the pivot are on its right. The pivot element takes its correct position in the sorted array.

Recursively Apply: Apply the above steps recursively to the left and right sub-arrays until the entire array is sorted.

Pseudocode for Quick Sort
Here is the pseudocode for Quick Sort:

function quickSort(array, left, right):
    if left < right:
        # Partition the array, pivot is partitioning index
        pivotIndex = partition(array, left, right)
        
        # Recursively sort elements before partition and after partition
        quickSort(array, left, pivotIndex - 1)
        quickSort(array, pivotIndex + 1, right)

function partition(array, left, right):
    # Choose the pivot (e.g., last element)
    pivot = array[right]
    i = left - 1
    
    for j from left to right - 1:
        # If current element is smaller than or equal to pivot
        if array[j] <= pivot:
            i = i + 1
            swap array[i] with array[j]
    
    # Swap pivot element with element at index i + 1
    swap array[i + 1] with array[right]
    
    return i + 1
Detailed Example
Let's consider an example to illustrate Quick Sort:

Input Array: [38, 27, 43, 3, 9, 82, 10]
Step-by-Step Process:

Initial Array: [38, 27, 43, 3, 9, 82, 10]

Choose Pivot: Choose 10 as the pivot (can be chosen randomly or by another method).

Partitioning:

Partition the array around the pivot 10:
Move elements less than 10 to the left and elements greater than 10 to the right.
After partitioning: [3, 9, 10, 27, 43, 82, 38]
Pivot 10 is now in its correct position.
Recursively Apply:

Recursively apply Quick Sort to the left sub-array [3, 9] and the right sub-array [27, 43, 82, 38].
Choose 9 as pivot for left sub-array, resulting in [3, 9] (already sorted).
Choose 38 as pivot for right sub-array, resulting in [27, 38, 43, 82].
Sorted Array: [3, 9, 10, 27, 38, 43, 82]

Implementation in Python
Here is a Python implementation of Quick Sort:

def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    
    # Define partition function
    def partition(arr, low, high):
        pivot = arr[high]  # Choose the pivot (can be optimized with other strategies)
        i = low - 1
        
        for j in range(low, high):
            if arr[j] <= pivot:
                i += 1
                arr[i], arr[j] = arr[j], arr[i]
        
        arr[i + 1], arr[high] = arr[high], arr[i + 1]
        return i + 1
    
    # Define quick sort function
    def quick_sort_helper(arr, low, high):
        if low < high:
            pi = partition(arr, low, high)
            quick_sort_helper(arr, low, pi - 1)
            quick_sort_helper(arr, pi + 1, high)
    
    quick_sort_helper(arr, 0, len(arr) - 1)
    return arr

# Example usage:
arr = [38, 27, 43, 3, 9, 82, 10]
sorted_arr = quick_sort(arr)
print("Sorted array:", sorted_arr)
Time Complexity
Best Case: O(n log n) - when the partitioning is balanced.
Average Case: O(n log n)
Worst Case: O(n^2) - when the partitioning is unbalanced, typically occurs when the pivot is the smallest or largest element.
Space Complexity
Space Complexity: O(log n) - for the recursive call stack.
Use Cases and Limitations
Use Cases:

General Purpose: Suitable for a wide range of input data sizes and types.
In-Place Sorting: It can be implemented in-place with O(log n) extra space for recursion.
Limitations:

Worst-Case Complexity: Worst-case time complexity can degrade to O(n^2) if the pivot selection is not optimal (e.g., always choosing the smallest or largest element).
Not Stable: Quick Sort is not a stable sorting algorithm, meaning it may change the relative order of equal elements.
Quick Sort is widely used due to its average-case efficiency and can be optimized with different pivot selection strategies (e.g., median-of-three) to mitigate worst-case scenarios. It remains a fundamental algorithm for sorting and is often preferred over other sorting algorithms like Merge Sort for its in-place partitioning and average-case efficiency.