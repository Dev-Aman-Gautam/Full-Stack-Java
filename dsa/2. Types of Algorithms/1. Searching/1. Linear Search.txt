Linear Search Algorithm
Linear search, also known as sequential search, is one of the simplest search algorithms used to find a specific element within a list or array. The algorithm works by iterating through each element of the list and comparing it to the target value until a match is found or the end of the list is reached.

How Linear Search Works
Start at the Beginning: Begin at the first element of the array.
Compare Elements: Compare the target value with each element of the array one by one.
Check for Match: If the target value matches an element, return the index of the element.
Continue Until End: If the target value does not match any element and the end of the array is reached, return an indication that the target is not found (usually -1 or null).
Steps in Pseudocode
Here is the pseudocode for a linear search algorithm:

function linearSearch(array, target)
    for index from 0 to length(array) - 1
        if array[index] == target
            return index
    return -1
Detailed Example
Let's consider an example to illustrate the linear search:

Input Array: [34, 7, 23, 32, 5, 62]
Target Value: 23
Step-by-Step Process:

1. Compare 34 with 23: No match.
2. Compare 7 with 23: No match.
3. Compare 23 with 23: Match found.
4. Return the index of 23, which is 2.

Implementation in Python
Here is a simple implementation of linear search in Python:

def linear_search(array, target):
    for index in range(len(array)):
        if array[index] == target:
            return index
    return -1

# Example usage:
arr = [34, 7, 23, 32, 5, 62]
target = 23
result = linear_search(arr, target)

if result != -1:
    print(f"Element found at index: {result}")
else:
    print("Element not found in the array")
Time and Space Complexity
Time Complexity: O(n), where n is the number of elements in the array. In the worst case, the algorithm needs to check every element in the array.
Space Complexity: O(1), as the algorithm uses a constant amount of extra space regardless of the input size.
Use Cases and Limitations
Use Cases:

Small datasets where the simplicity of the algorithm is more important than its efficiency.
Unsorted or unordered arrays where more complex algorithms like binary search cannot be applied.
Limitations:

Inefficient for large datasets due to its linear time complexity.
Not suitable when frequent searches are required on large arrays, where more efficient algorithms like binary search (for sorted arrays) would be preferable.
Linear search is a fundamental algorithm that is easy to understand and implement, making it a useful tool for learning basic algorithm concepts and for simple search tasks.