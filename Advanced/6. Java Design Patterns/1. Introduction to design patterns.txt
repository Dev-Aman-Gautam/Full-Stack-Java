
Design Patterns: A Guide to Reusable Software Solutions
Design patterns are reusable solutions to commonly occurring problems in software design. They represent best practices evolved over time by experienced software developers and provide a systematic approach to solving design issues.

Why Use Design Patterns?
✅ Reusability: Avoids reinventing the wheel by using proven solutions.
✅ Scalability: Helps design flexible systems that can be extended easily.
✅ Maintainability: Improves code readability and modularity.
✅ Efficiency: Enhances software performance by promoting best practices.
✅ Communication: Serves as a shared vocabulary for software developers.

Design patterns are broadly classified into three categories:

1. Creational Patterns
Creational patterns focus on object creation mechanisms, making it more flexible and efficient. They help in controlling object creation and ensure proper instantiation based on system requirements.

1.1 Factory Method Pattern
The Factory Method defines an interface for creating objects but allows subclasses to alter the type of objects they create. This pattern is useful when the exact type of object isn't known until runtime.

Real-World Example: Vehicle Manufacturing 🚗
Imagine a car manufacturing plant that produces different types of vehicles (Sedan, SUV, and Truck). Instead of hardcoding which vehicle to create, we can use a factory method that decides which vehicle to produce dynamically.

Example Implementation:
java
Copy
Edit
abstract class Vehicle {
    abstract void drive();
}

class Sedan extends Vehicle {
    @Override
    void drive() {
        System.out.println("Driving a Sedan.");
    }
}

class SUV extends Vehicle {
    @Override
    void drive() {
        System.out.println("Driving an SUV.");
    }
}

class VehicleFactory {
    public static Vehicle createVehicle(String type) {
        if (type.equalsIgnoreCase("Sedan")) {
            return new Sedan();
        } else if (type.equalsIgnoreCase("SUV")) {
            return new SUV();
        }
        return null;
    }
}

public class FactoryMethodExample {
    public static void main(String[] args) {
        Vehicle myCar = VehicleFactory.createVehicle("SUV");
        myCar.drive(); // Output: Driving an SUV.
    }
}
1.2 Singleton Pattern
The Singleton pattern ensures that a class has only one instance and provides a global point of access to it.

Real-World Example: Database Connection 🛢️
In a banking application, there should be only one database connection shared across the entire system to prevent multiple connections from overloading the server.

Example Implementation:
java
Copy
Edit
class DatabaseConnection {
    private static DatabaseConnection instance;

    private DatabaseConnection() {} // Private constructor prevents instantiation

    public static synchronized DatabaseConnection getInstance() {
        if (instance == null) {
            instance = new DatabaseConnection();
        }
        return instance;
    }

    public void connect() {
        System.out.println("Connected to the database.");
    }
}

public class SingletonExample {
    public static void main(String[] args) {
        DatabaseConnection connection = DatabaseConnection.getInstance();
        connection.connect(); // Output: Connected to the database.
    }
}
1.3 Builder Pattern
The Builder pattern separates object construction from its representation, allowing the same construction process to create different representations.

Real-World Example: Customizing a Pizza Order 🍕
A pizza shop allows customers to customize their pizza with different toppings, crust, and size. Instead of multiple constructors, we use the Builder pattern to create different pizza variations.

java
Copy
Edit
class Pizza {
    private String size;
    private boolean cheese;
    private boolean pepperoni;
    private boolean mushrooms;

    private Pizza(PizzaBuilder builder) {
        this.size = builder.size;
        this.cheese = builder.cheese;
        this.pepperoni = builder.pepperoni;
        this.mushrooms = builder.mushrooms;
    }

    public void showPizza() {
        System.out.println("Pizza Size: " + size);
        System.out.println("Cheese: " + cheese);
        System.out.println("Pepperoni: " + pepperoni);
        System.out.println("Mushrooms: " + mushrooms);
    }

    static class PizzaBuilder {
        private String size;
        private boolean cheese;
        private boolean pepperoni;
        private boolean mushrooms;

        public PizzaBuilder(String size) {
            this.size = size;
        }

        public PizzaBuilder addCheese() {
            this.cheese = true;
            return this;
        }

        public PizzaBuilder addPepperoni() {
            this.pepperoni = true;
            return this;
        }

        public PizzaBuilder addMushrooms() {
            this.mushrooms = true;
            return this;
        }

        public Pizza build() {
            return new Pizza(this);
        }
    }
}

public class BuilderExample {
    public static void main(String[] args) {
        Pizza myPizza = new Pizza.PizzaBuilder("Large")
                .addCheese()
                .addPepperoni()
                .build();
        myPizza.showPizza();
    }
}
2. Structural Patterns
Structural patterns help define the composition of classes and objects, focusing on how entities interact with each other efficiently.

2.1 Adapter Pattern
The Adapter pattern allows objects with incompatible interfaces to work together by wrapping an existing class with a new interface.

Real-World Example: Charging Adapter 🔌
Your phone uses a USB-C charger, but you only have a micro-USB cable. An adapter allows you to use the micro-USB cable with a USB-C port.

java
Copy
Edit
interface USB_C {
    void charge();
}

class MicroUSB {
    void chargeWithMicroUSB() {
        System.out.println("Charging with Micro-USB.");
    }
}

class MicroUSBtoUSBCAdapter implements USB_C {
    private final MicroUSB microUSB;

    public MicroUSBtoUSBCAdapter(MicroUSB microUSB) {
        this.microUSB = microUSB;
    }

    @Override
    public void charge() {
        microUSB.chargeWithMicroUSB();
    }
}

public class AdapterExample {
    public static void main(String[] args) {
        MicroUSB oldCharger = new MicroUSB();
        USB_C adapter = new MicroUSBtoUSBCAdapter(oldCharger);
        adapter.charge(); // Output: Charging with Micro-USB.
    }
}
2.2 Decorator Pattern
The Decorator pattern dynamically adds responsibilities to an object without modifying its structure.

Real-World Example: Adding Features to Coffee ☕
You order a basic coffee, but then decide to add milk and sugar. Instead of modifying the coffee class, we use decorators to add additional features dynamically.

java
Copy
Edit
interface Coffee {
    String getDescription();
    double getCost();
}

class BasicCoffee implements Coffee {
    @Override
    public String getDescription() {
        return "Basic Coffee";
    }

    @Override
    public double getCost() {
        return 50;
    }
}

class MilkDecorator implements Coffee {
    private final Coffee coffee;

    public MilkDecorator(Coffee coffee) {
        this.coffee = coffee;
    }

    @Override
    public String getDescription() {
        return coffee.getDescription() + ", Milk";
    }

    @Override
    public double getCost() {
        return coffee.getCost() + 10;
    }
}

public class DecoratorExample {
    public static void main(String[] args) {
        Coffee myCoffee = new MilkDecorator(new BasicCoffee());
        System.out.println(myCoffee.getDescription() + " -> Rs." + myCoffee.getCost());
    }
}
Conclusion
Design patterns improve software quality by providing reusable, scalable, and maintainable solutions to common design problems. Mastering these patterns empowers developers to write cleaner and more efficient code. 🚀