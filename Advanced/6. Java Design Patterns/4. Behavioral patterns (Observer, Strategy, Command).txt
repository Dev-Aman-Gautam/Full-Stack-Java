Behavioral patterns in software design focus on the communication between objects and how they collaborate to achieve complex behaviors. These patterns define interactions between objects and how responsibilities are distributed among them. Here are three common behavioral patterns:

1. Observer Pattern
Intent: Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.

Structure:

Subject: Maintains a list of observers, and notifies them of changes in its state.
Observer: Defines an interface for objects that should be notified of changes in the subject's state.
ConcreteSubject: Implements the subject interface and notifies observers of any state changes.
ConcreteObserver: Implements the observer interface to receive updates from the subject.
Example:

// Subject interface
public interface Subject {
    void registerObserver(Observer observer);
    void removeObserver(Observer observer);
    void notifyObservers();
}

// Concrete subject
public class WeatherStation implements Subject {
    private int temperature;
    private List<Observer> observers = new ArrayList<>();

    public void setTemperature(int temperature) {
        this.temperature = temperature;
        notifyObservers();
    }

    @Override
    public void registerObserver(Observer observer) {
        observers.add(observer);
    }

    @Override
    public void removeObserver(Observer observer) {
        observers.remove(observer);
    }

    @Override
    public void notifyObservers() {
        for (Observer observer : observers) {
            observer.update(temperature);
        }
    }
}

// Observer interface
public interface Observer {
    void update(int temperature);
}

// Concrete observer
public class DisplayDevice implements Observer {
    @Override
    public void update(int temperature) {
        System.out.println("Temperature updated: " + temperature);
    }
}

// Client code
public class Client {
    public static void main(String[] args) {
        WeatherStation weatherStation = new WeatherStation();
        Observer displayDevice = new DisplayDevice();

        weatherStation.registerObserver(displayDevice);

        // Simulate temperature change
        weatherStation.setTemperature(25); // Output: Temperature updated: 25
    }
}
Usage: Observer pattern is used when:

You need to establish a one-to-many dependency between objects, where changes in one object state need to be reflected in multiple other objects.
You want to decouple objects, allowing them to interact without knowing each other's details.
2. Strategy Pattern
Intent: Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.

Structure:

Context: Maintains a reference to the strategy object and delegates execution to it.
Strategy: Defines an interface for the algorithms.
ConcreteStrategy: Implements the strategy interface, providing specific algorithms.
Example:

// Strategy interface
public interface PaymentStrategy {
    void pay(int amount);
}

// Concrete strategies
public class CreditCardPaymentStrategy implements PaymentStrategy {
    private String cardNumber;
    private String expiryDate;
    private String cvv;

    public CreditCardPaymentStrategy(String cardNumber, String expiryDate, String cvv) {
        this.cardNumber = cardNumber;
        this.expiryDate = expiryDate;
        this.cvv = cvv;
    }

    @Override
    public void pay(int amount) {
        System.out.println(amount + " paid using Credit Card.");
    }
}

public class PayPalPaymentStrategy implements PaymentStrategy {
    private String email;
    private String password;

    public PayPalPaymentStrategy(String email, String password) {
        this.email = email;
        this.password = password;
    }

    @Override
    public void pay(int amount) {
        System.out.println(amount + " paid using PayPal.");
    }
}

// Context
public class ShoppingCart {
    private PaymentStrategy paymentStrategy;

    public void setPaymentStrategy(PaymentStrategy paymentStrategy) {
        this.paymentStrategy = paymentStrategy;
    }

    public void checkout(int amount) {
        paymentStrategy.pay(amount);
    }
}

// Client code
public class Client {
    public static void main(String[] args) {
        ShoppingCart cart = new ShoppingCart();
        cart.setPaymentStrategy(new CreditCardPaymentStrategy("1234-5678-9101-1121", "12/23", "123"));
        cart.checkout(100); // Output: 100 paid using Credit Card

        cart.setPaymentStrategy(new PayPalPaymentStrategy("example@example.com", "password"));
        cart.checkout(200); // Output: 200 paid using PayPal
    }
}
Usage: Strategy pattern is used when:

You have multiple algorithms for performing a task and want to select one of them at runtime.
You want to avoid exposing complex algorithmic details to clients.
You need to vary behaviors or algorithms independently from the clients that use them.
3. Command Pattern
Intent: Encapsulate a request as an object, thereby allowing for parameterization of clients with different requests, queuing of requests, and logging of requests.

Structure:

Command: Declares an interface for executing an operation.
ConcreteCommand: Implements the Command interface, encapsulating a specific action and its parameters.
Invoker: Asks the command to carry out a request.
Receiver: Knows how to perform the operations associated with carrying out a request.
Example:

// Command interface
public interface Command {
    void execute();
}

// Concrete command
public class LightOnCommand implements Command {
    private Light light;

    public LightOnCommand(Light light) {
        this.light = light;
    }

    @Override
    public void execute() {
        light.turnOn();
    }
}

// Receiver
public class Light {
    public void turnOn() {
        System.out.println("Light is turned on.");
    }
}

// Invoker
public class RemoteControl {
    private Command command;

    public void setCommand(Command command) {
        this.command = command;
    }

    public void pressButton() {
        command.execute();
    }
}

// Client code
public class Client {
    public static void main(String[] args) {
        Light light = new Light();
        Command lightOnCommand = new LightOnCommand(light);

        RemoteControl remote = new RemoteControl();
        remote.setCommand(lightOnCommand);
        remote.pressButton(); // Output: Light is turned on.
    }
}
Usage: Command pattern is used when:

You need to parameterize objects with operations.
You want to queue operations, delay their execution, or execute them asynchronously.
You need to support undoable operations or logging changes.
Conclusion
Behavioral patterns help in defining clear communication between objects and how they interact to achieve complex behaviors. By applying these patterns, developers can enhance code flexibility, maintainability, and reusability, making software systems more adaptable to changing requirements and easier to extend. Each pattern addresses specific design challenges related to object interaction and distribution of responsibilities, providing proven solutions to common problems encountered in software development.