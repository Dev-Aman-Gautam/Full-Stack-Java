Structural patterns in software design focus on how classes and objects are composed to form larger structures while keeping their relationships flexible and efficient. They help in defining relationships between objects and how they collaborate to achieve larger functionalities. Here are three common structural patterns:

1. Adapter Pattern
Intent: Convert the interface of a class into another interface that clients expect. It allows classes with incompatible interfaces to work together.

Structure:

Target: Defines the desired interface that the client uses.
Adapter: Adapts the interface of the adaptee to the target interface.
Adaptee: Defines an existing interface that needs adapting.
Example:

// Target interface
public interface MediaPlayer {
    void play(String audioType, String fileName);
}

// Adaptee class
public class AudioPlayer {
    public void playAudio(String fileName) {
        System.out.println("Playing audio file: " + fileName);
    }
}

// Adapter class
public class AudioPlayerAdapter implements MediaPlayer {
    private AudioPlayer audioPlayer = new AudioPlayer();

    @Override
    public void play(String audioType, String fileName) {
        if (audioType.equalsIgnoreCase("mp3")) {
            audioPlayer.playAudio(fileName);
        } else {
            System.out.println("Unsupported audio type: " + audioType);
        }
    }
}

// Client code
public class Client {
    public static void main(String[] args) {
        MediaPlayer player = new AudioPlayerAdapter();
        player.play("mp3", "song.mp3");
    }
}
Usage: Adapter pattern is used when:

You want to use an existing class with a different interface.
You want to create a reusable class that cooperates with classes which don't necessarily have compatible interfaces.
You need to work with multiple classes that have incompatible interfaces.
2. Decorator Pattern
Intent: Attach additional responsibilities to an object dynamically. Provides a flexible alternative to subclassing for extending functionality.

Structure:

Component: Defines the interface for objects that can have responsibilities added to them dynamically.
ConcreteComponent: Implements the component interface and defines core functionality.
Decorator: Maintains a reference to a component object and conforms to the component's interface, while adding behavior or responsibilities.
Example:

// Component interface
public interface Car {
    void assemble();
}

// Concrete component
public class BasicCar implements Car {
    @Override
    public void assemble() {
        System.out.print("Basic Car.");
    }
}

// Decorator class
public class CarDecorator implements Car {
    protected Car decoratedCar;

    public CarDecorator(Car decoratedCar) {
        this.decoratedCar = decoratedCar;
    }

    @Override
    public void assemble() {
        this.decoratedCar.assemble();
    }
}

// Concrete decorators
public class SportsCar extends CarDecorator {
    public SportsCar(Car decoratedCar) {
        super(decoratedCar);
    }

    @Override
    public void assemble() {
        super.assemble();
        System.out.print(" Adding features of Sports Car.");
    }
}

public class LuxuryCar extends CarDecorator {
    public LuxuryCar(Car decoratedCar) {
        super(decoratedCar);
    }

    @Override
    public void assemble() {
        super.assemble();
        System.out.print(" Adding features of Luxury Car.");
    }
}

// Client code
public class Client {
    public static void main(String[] args) {
        Car sportsCar = new SportsCar(new BasicCar());
        sportsCar.assemble(); // Output: Basic Car. Adding features of Sports Car.

        System.out.println("\n*****");

        Car sportsLuxuryCar = new SportsCar(new LuxuryCar(new BasicCar()));
        sportsLuxuryCar.assemble(); // Output: Basic Car. Adding features of Luxury Car. Adding features of Sports Car.
    }
}
Usage: Decorator pattern is used when:

You want to add responsibilities to objects dynamically and transparently.
You want to avoid subclassing for extending functionality, which can lead to a large number of subclasses.
You need to add or remove responsibilities from objects at runtime.
3. Proxy Pattern
Intent: Provide a surrogate or placeholder for another object to control access to it.

Structure:

Subject: Defines the common interface for the RealSubject and Proxy so that a Proxy can be used anywhere a RealSubject is expected.
RealSubject: Defines the real object that the Proxy represents.
Proxy: Maintains a reference to the RealSubject and controls access to it, implementing the same interface as the RealSubject.
Example:

// Subject interface
public interface Internet {
    void connectTo(String serverHost);
}

// RealSubject
public class RealInternet implements Internet {
    @Override
    public void connectTo(String serverHost) {
        System.out.println("Connecting to " + serverHost);
    }
}

// Proxy class
public class ProxyInternet implements Internet {
    private RealInternet realInternet = new RealInternet();
    private static List<String> restrictedSites;

    static {
        restrictedSites = new ArrayList<>();
        restrictedSites.add("blocked.com");
        restrictedSites.add("restricted.com");
        restrictedSites.add("banned.com");
    }

    @Override
    public void connectTo(String serverHost) {
        if (restrictedSites.contains(serverHost.toLowerCase())) {
            System.out.println("Access Denied: " + serverHost);
        } else {
            realInternet.connectTo(serverHost);
        }
    }
}

// Client code
public class Client {
    public static void main(String[] args) {
        Internet internet = new ProxyInternet();
        internet.connectTo("google.com"); // Output: Connecting to google.com
        internet.connectTo("blocked.com"); // Output: Access Denied: blocked.com
    }
}
Usage: Proxy pattern is used when:

You need to control access to the real object (e.g., for security reasons).
You need a simplified or lightweight version of a complex or heavy object.
You want to delay the creation and initialization of the real object until it is actually needed (lazy initialization).
Conclusion
Structural patterns provide flexible ways to compose objects and classes into larger structures while keeping them loosely coupled and easy to modify. By understanding and applying these patterns, developers can improve the design, maintainability, and extensibility of their software systems, ensuring they are adaptable to changing requirements and scalable for future enhancements. Each pattern addresses specific design challenges and offers a proven solution to common problems encountered in software development.





